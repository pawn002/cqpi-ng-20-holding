{
    "pipes": [],
    "interfaces": [
        {
            "name": "ColorMetaObj",
            "id": "interface-ColorMetaObj-710c7cdd66ee9d4aba8c39f8172f2b9dbc1018de02ff2ffeb2a495d298556ab16dde6518d9a7bd0e0250a9f07afc771fa345ca80cf79a90c0aa88735f662cb9b",
            "file": "src/app/services/color-util.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Color from 'colorjs.io';\r\nimport { to } from 'colorjs.io/fn';\r\n// import { ColorConstructor } from 'colorjs.io/types/src/color';\r\nimport { ColorConstructor } from 'colorjs.io';\r\nimport { scaleLinear, sort } from 'd3';\r\nimport { random, reverse, uniqBy, uniq } from 'lodash';\r\nimport { TableColorCell, TableData } from '../_components/palette-table/palette-table.component';\r\n\r\nexport type ColorPair = [string, string];\r\n\r\nexport type ColorCoordArray = [number, number, number];\r\n\r\nexport class ChromaMatchObject {\r\n  success: boolean = false;\r\n  colors: ColorPair | null = null;\r\n  chroma: number = NaN;\r\n}\r\n\r\nexport interface MinMaxLightObject {\r\n  originalCoords: ColorCoordArray;\r\n  lightMin: number;\r\n  lightMax: number;\r\n}\r\n\r\n// export type ColorVariant = [number, number, number];\r\n\r\nexport interface ColorMetaObj {\r\n  lightness: number | string;\r\n  chroma: number | string;\r\n  hue: number | string;\r\n  saturation: number | string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  parseColor(color: string): ColorConstructor | null {\r\n    let parsedColor: ColorConstructor | null = null;\r\n\r\n    try {\r\n      parsedColor = Color.parse(color);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return parsedColor;\r\n  }\r\n\r\n  getRgb255Array(color: string) {\r\n    const colorObj = this.parseColor(color);\r\n\r\n    let array255: [number, number, number] | null = null;\r\n\r\n    if (colorObj) {\r\n      const colorCoordsDecimal = colorObj.coords;\r\n\r\n      array255 = [\r\n        Math.round(colorCoordsDecimal[0] * 255),\r\n        Math.round(colorCoordsDecimal[1] * 255),\r\n        Math.round(colorCoordsDecimal[2] * 255),\r\n      ];\r\n    } else {\r\n      console.error(`unable to parse: ${color}`);\r\n    }\r\n\r\n    return array255;\r\n  }\r\n\r\n  createSrgbColor(color: string, lightness: number): string | null {\r\n    let srgbColor: string | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const originalChroma = oklchColor.coords[1];\r\n      const originalHue = oklchColor.coords[2];\r\n\r\n      const targetColor = new Color('oklch', [lightness, originalChroma, originalHue]);\r\n\r\n      // const inSrgbGamut = targetColor.inGamut('srgb');\r\n\r\n      // if (!inSrgbGamut) {\r\n      //   console.warn(\r\n      //     `OKLCH color in SRGB gamut: ${targetColor.inGamut('srgb')}`\r\n      //   );\r\n      // }\r\n\r\n      const tColorInSrgbGamut = targetColor.toGamut({\r\n        space: 'srgb',\r\n        method: 'oklch.c',\r\n      });\r\n\r\n      const targetColorAsRgbColor = tColorInSrgbGamut.to('srgb');\r\n\r\n      srgbColor = targetColorAsRgbColor.toString({ format: 'hex' });\r\n    }\r\n\r\n    return srgbColor;\r\n  }\r\n\r\n  isInSrgbGamut(oklchColorCoord: ColorCoordArray): Promise<boolean> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      try {\r\n        const colorObject = new Color('oklch', oklchColorCoord);\r\n        const variantInGamut = colorObject.inGamut('srgb');\r\n\r\n        resolve(variantInGamut);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  createVariants(color: string): Array<ColorCoordArray> | null {\r\n    let variantCollection: Array<ColorCoordArray> | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const lchCooords = oklchColor.coords;\r\n      const colorChroma = lchCooords[1];\r\n      const colorHue = lchCooords[2];\r\n\r\n      // 1) create enough steps of lightness\r\n      const lightnessSteps = 1000;\r\n      const lightMax = 1;\r\n      const lightMin = 0;\r\n      const lightInterval = (lightMax - lightMin) / lightnessSteps;\r\n\r\n      // 2) create all variants of color using constant chroma and hue.\r\n      variantCollection = [];\r\n\r\n      // 2a) this actually creates `lightnessSteps + 1` variants as initial variant has to start at zero.\r\n      for (let i = 0; i <= lightnessSteps; i++) {\r\n        const variantTargetLight = i * lightInterval;\r\n        const variant: ColorCoordArray = [variantTargetLight, colorChroma, colorHue];\r\n\r\n        variantCollection.push(variant);\r\n      }\r\n    } else {\r\n      console.error(`unable to parse color`);\r\n    }\r\n\r\n    return variantCollection;\r\n  }\r\n\r\n  filterOutOfGamutVariants(\r\n    variants: Array<ColorCoordArray> | null\r\n  ): Promise<Array<ColorCoordArray>> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!variants) {\r\n        reject(`no variants`);\r\n      } else {\r\n        let filteringComplete: boolean = false;\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < variants.length; i++) {\r\n          const curVariant = variants[i];\r\n\r\n          if (await this.isInSrgbGamut(curVariant)) {\r\n            filtered.push(curVariant);\r\n          }\r\n\r\n          if (i === variants.length - 1) filteringComplete = true;\r\n        }\r\n\r\n        if (filteringComplete) {\r\n          resolve(filtered);\r\n        } else {\r\n          reject(`error`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMinMaxLight(color: string): Promise<MinMaxLightObject | null> {\r\n    let returnedObject: MinMaxLightObject | null = null;\r\n\r\n    const initVariantCollection = this.createVariants(color);\r\n\r\n    const variantCollection = await this.filterOutOfGamutVariants(initVariantCollection);\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor && variantCollection.length) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      const lchCooords = oklchColor.coords;\r\n\r\n      const oklchLightCoordIndex = 0;\r\n      const firstArrayItemIndex = 0;\r\n      const lastArrayItemIndex = variantCollection.length - 1;\r\n\r\n      const minLight = variantCollection[firstArrayItemIndex][oklchLightCoordIndex];\r\n      const maxLight = variantCollection[lastArrayItemIndex][oklchLightCoordIndex];\r\n\r\n      returnedObject = {\r\n        originalCoords: lchCooords,\r\n        lightMin: minLight,\r\n        lightMax: maxLight,\r\n      };\r\n    } else {\r\n      if (!parsedColor) {\r\n        console.error(`unable to parse color`);\r\n      } else {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n        const lchCooords = oklchColor.coords;\r\n        returnedObject = {\r\n          originalCoords: lchCooords,\r\n          lightMin: lchCooords[0],\r\n          lightMax: lchCooords[0],\r\n        };\r\n      }\r\n    }\r\n\r\n    return returnedObject;\r\n  }\r\n\r\n  async getRandomColorPair(): Promise<ColorPair> {\r\n    let pair: ColorPair = ['black', 'white'];\r\n\r\n    // ref: oklch.com\r\n    // const targetChroma = 0.11;\r\n    const targetChroma = random(0.11, 0.34, true);\r\n\r\n    const colorOneLight = random(0.25, 0.26, true);\r\n    const colorOneHue = random(0, 360, true);\r\n    const colorTwoLight = random(0.94, 0.95, true);\r\n    const colorTwoHue = random(0, 360, true);\r\n\r\n    const colorOne = new Color('oklch', [colorOneLight, targetChroma, colorOneHue])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const colorTwo = new Color('oklch', [colorTwoLight, targetChroma, colorTwoHue])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const initPair: ColorPair = [colorOne, colorTwo];\r\n\r\n    const chromaMatchedPair = await this.matchChromas(initPair);\r\n\r\n    pair = chromaMatchedPair.colors ? chromaMatchedPair.colors : pair;\r\n\r\n    return pair;\r\n  }\r\n\r\n  // This function only adjust the first color of the pair.\r\n  async adjustColorPairForPresentation(pair: ColorPair): Promise<ColorPair> {\r\n    let returnedPair: ColorPair = ['black', 'white'];\r\n\r\n    const colorOne = pair[0];\r\n    const colortwo = pair[1];\r\n\r\n    const parsedColorOne = this.parseColor(colorOne);\r\n\r\n    const colorOneMinMaxLightObj = await this.getMinMaxLight(colorOne);\r\n\r\n    if (parsedColorOne && colorOneMinMaxLightObj) {\r\n      const colorOneTargetLightness =\r\n        colorOneMinMaxLightObj.lightMin +\r\n        (colorOneMinMaxLightObj.lightMax - colorOneMinMaxLightObj.lightMin) / 2;\r\n\r\n      const oklchColorOne = new Color('srgb', parsedColorOne.coords).to('oklch');\r\n\r\n      const adjColorOne = new Color('oklch', [\r\n        colorOneTargetLightness,\r\n        oklchColorOne.coords[1],\r\n        oklchColorOne.coords[2],\r\n      ])\r\n        .to('srgb')\r\n        .toString({ format: 'hex' });\r\n\r\n      returnedPair = [adjColorOne, colortwo];\r\n    } else {\r\n      console.warn('trouble adjusting colors');\r\n    }\r\n\r\n    return returnedPair;\r\n  }\r\n\r\n  async matchChromas(colorpair: ColorPair): Promise<ChromaMatchObject> {\r\n    let pair: ChromaMatchObject = new ChromaMatchObject();\r\n\r\n    const colorOneParsed = this.parseColor(colorpair[0]);\r\n    const colorTwoParsed = this.parseColor(colorpair[1]);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneOklch = new Color('srgb', colorOneParsed.coords).to('oklch');\r\n      const colorOneChroma = colorOneOklch.coords[1];\r\n\r\n      const colorTwoOklch = new Color('srgb', colorTwoParsed.coords).to('oklch');\r\n      const colorTwoChroma = colorTwoOklch.coords[1];\r\n\r\n      const colorOneCandCoords: ColorCoordArray = [\r\n        colorOneOklch.coords[0],\r\n        colorTwoChroma,\r\n        colorOneOklch.coords[2],\r\n      ];\r\n      const colorTwoCandCoords: ColorCoordArray = [\r\n        colorTwoOklch.coords[0],\r\n        colorOneChroma,\r\n        colorTwoOklch.coords[2],\r\n      ];\r\n\r\n      const colorOneCandInGamut = await this.isInSrgbGamut(colorOneCandCoords);\r\n      const colorTwoCandInGamut = await this.isInSrgbGamut(colorTwoCandCoords);\r\n\r\n      if (colorOneCandInGamut && !colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          new Color('oklch', colorOneCandCoords).to('srgb').toString({ format: 'hex' }),\r\n          colorpair[1],\r\n        ];\r\n\r\n        pair.chroma = colorOneCandCoords[1];\r\n      }\r\n\r\n      if (!colorOneCandInGamut && colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          colorpair[0],\r\n          new Color('oklch', colorTwoCandCoords).to('srgb').toString({ format: 'hex' }),\r\n        ];\r\n\r\n        pair.chroma = colorTwoCandCoords[1];\r\n      }\r\n\r\n      if (colorOneCandInGamut && colorTwoCandInGamut) {\r\n        if (colorOneCandCoords[1] > colorTwoCandCoords[1]) {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            new Color('oklch', colorOneCandCoords).to('srgb').toString({ format: 'hex' }),\r\n            colorpair[1],\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        } else {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            colorpair[0],\r\n            new Color('oklch', colorTwoCandCoords).to('srgb').toString({ format: 'hex' }),\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"color parsing didn't work out. \");\r\n    }\r\n\r\n    return pair;\r\n  }\r\n\r\n  calcDeltaE(colorOne: string, colorTwo: string): number | null {\r\n    let delta: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawDelta = colorOneObj.deltaE2000(colorTwoObj);\r\n\r\n      // const fixedDelta = rawDelta.toFixed(2);\r\n\r\n      // delta = parseFloat(fixedDelta);\r\n      delta = Math.round(rawDelta);\r\n    }\r\n\r\n    return delta;\r\n  }\r\n\r\n  calcWcag2(colorOne: string, colorTwo: string): number | null {\r\n    let wcag21: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawWcag21 = colorOneObj.contrast(colorTwoObj, 'WCAG21');\r\n\r\n      const fixedDelta = rawWcag21.toFixed(1);\r\n\r\n      wcag21 = parseFloat(fixedDelta);\r\n    }\r\n\r\n    return wcag21;\r\n  }\r\n\r\n  getColorMeta(color: string): ColorMetaObj | null {\r\n    let meta: ColorMetaObj | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const lchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      meta = {\r\n        lightness: lchColor.coords[0].toFixed(2),\r\n        chroma: lchColor.coords[1].toFixed(2),\r\n        hue: lchColor.coords[2].toFixed(2),\r\n        saturation: ((lchColor.coords[1] / lchColor.coords[0]) * 100).toFixed(2),\r\n      };\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getMinObjectDimension(apca: number): number {\r\n    let dimension: number = NaN;\r\n\r\n    const absApca = Math.abs(apca);\r\n\r\n    const pixels = [1, 1.5, 2, 3, 4, 6, 8, 10, 15];\r\n    const apcaScores = [90, 75, 60, 50, 45, 30, 25, 20, 15];\r\n    const minLookup = scaleLinear(pixels).domain(apcaScores);\r\n\r\n    const initSize = minLookup(absApca).toFixed(2);\r\n\r\n    dimension = parseFloat(initSize);\r\n\r\n    if (dimension > 15) {\r\n      dimension = 15;\r\n    }\r\n\r\n    if (absApca >= 100) {\r\n      dimension = 0.25;\r\n    }\r\n\r\n    if (absApca < 15) {\r\n      dimension = NaN;\r\n    }\r\n\r\n    return dimension;\r\n  }\r\n\r\n  generateAllOklchVariants(\r\n    color: string,\r\n    lightSteps: number,\r\n    chromaSteps: number\r\n  ): Promise<TableData> {\r\n    return new Promise((resolve, reject) => {\r\n      const parsedColor = this.parseColor(color);\r\n\r\n      const variantsCollection = [];\r\n\r\n      let sortedVariantsCollection = [];\r\n\r\n      if (parsedColor) {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n        const lchCooords = oklchColor.coords;\r\n        const colorLight = lchCooords[0];\r\n        const colorChroma = lchCooords[1];\r\n        const colorHue = lchCooords[2];\r\n\r\n        const lightMax = 1;\r\n        const lightMin = 0;\r\n        const lightInterval = (lightMax - lightMin) / lightSteps;\r\n\r\n        // calculate light levels\r\n        const rawLightLevels = [];\r\n\r\n        let lLevel = colorLight;\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel + lightInterval;\r\n        } while (lLevel <= lightMax);\r\n\r\n        lLevel = colorLight;\r\n\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel - lightInterval;\r\n        } while (lLevel >= lightMin);\r\n\r\n        const sortedLightLevels = sort(uniq(rawLightLevels));\r\n\r\n        const chromaMax = 0.33;\r\n        const chromaMin = 0;\r\n        const chromaInterval = (chromaMax - chromaMin) / chromaSteps;\r\n\r\n        // calculate chroma levels\r\n        const rawChromaLevels = [];\r\n\r\n        let cLevel = colorChroma;\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel + chromaInterval;\r\n        } while (cLevel <= chromaMax);\r\n\r\n        cLevel = colorChroma;\r\n\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel - chromaInterval;\r\n        } while (cLevel >= chromaMin);\r\n\r\n        const sortedChromaLevels = sort(uniq(rawChromaLevels));\r\n\r\n        // generate all rows\r\n        for (let i = 0; i < sortedLightLevels.length; i++) {\r\n          const variantRow: Array<TableColorCell> = [];\r\n\r\n          for (let j = 0; j < sortedChromaLevels.length; j++) {\r\n            const targetLightness = sortedLightLevels[i];\r\n\r\n            const targetChroma = sortedChromaLevels[j];\r\n\r\n            const variantColor = new Color('oklch', [targetLightness, targetChroma, colorHue]);\r\n\r\n            const variantColorinGamut = variantColor.inGamut('srgb');\r\n\r\n            const colorVal = variantColorinGamut\r\n              ? variantColor.to('srgb').toString({ format: 'hex' })\r\n              : '';\r\n\r\n            const deltaE = colorVal ? this.calcDeltaE(colorVal, color) : null;\r\n\r\n            const dLight = colorVal\r\n              ? Math.round(((targetLightness - colorLight) / colorLight) * 100)\r\n              : null;\r\n\r\n            const dChroma = colorVal\r\n              ? Math.round(((targetChroma - colorChroma) / colorChroma) * 100)\r\n              : null;\r\n\r\n            const variantObj: TableColorCell = {\r\n              color: colorVal,\r\n              lightness: targetLightness,\r\n              chroma: targetChroma,\r\n              hue: colorHue,\r\n              deltaE: !deltaE ? NaN : deltaE,\r\n              deltaChroma: !dChroma ? NaN : dChroma,\r\n              deltaLightness: !dLight ? NaN : dLight,\r\n            };\r\n\r\n            variantRow.push(variantObj);\r\n          }\r\n\r\n          variantsCollection.push(variantRow);\r\n        }\r\n      } else {\r\n        console.error(`could not parse color`);\r\n\r\n        reject(`could not parse color`);\r\n      }\r\n\r\n      // order color rows from light to dark\r\n      sortedVariantsCollection = reverse(variantsCollection);\r\n\r\n      resolve(sortedVariantsCollection);\r\n    });\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "properties": [
                {
                    "name": "chroma",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "hue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "lightness",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "saturation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "MinMaxLightObject",
            "id": "interface-MinMaxLightObject-710c7cdd66ee9d4aba8c39f8172f2b9dbc1018de02ff2ffeb2a495d298556ab16dde6518d9a7bd0e0250a9f07afc771fa345ca80cf79a90c0aa88735f662cb9b",
            "file": "src/app/services/color-util.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Color from 'colorjs.io';\r\nimport { to } from 'colorjs.io/fn';\r\n// import { ColorConstructor } from 'colorjs.io/types/src/color';\r\nimport { ColorConstructor } from 'colorjs.io';\r\nimport { scaleLinear, sort } from 'd3';\r\nimport { random, reverse, uniqBy, uniq } from 'lodash';\r\nimport { TableColorCell, TableData } from '../_components/palette-table/palette-table.component';\r\n\r\nexport type ColorPair = [string, string];\r\n\r\nexport type ColorCoordArray = [number, number, number];\r\n\r\nexport class ChromaMatchObject {\r\n  success: boolean = false;\r\n  colors: ColorPair | null = null;\r\n  chroma: number = NaN;\r\n}\r\n\r\nexport interface MinMaxLightObject {\r\n  originalCoords: ColorCoordArray;\r\n  lightMin: number;\r\n  lightMax: number;\r\n}\r\n\r\n// export type ColorVariant = [number, number, number];\r\n\r\nexport interface ColorMetaObj {\r\n  lightness: number | string;\r\n  chroma: number | string;\r\n  hue: number | string;\r\n  saturation: number | string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  parseColor(color: string): ColorConstructor | null {\r\n    let parsedColor: ColorConstructor | null = null;\r\n\r\n    try {\r\n      parsedColor = Color.parse(color);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return parsedColor;\r\n  }\r\n\r\n  getRgb255Array(color: string) {\r\n    const colorObj = this.parseColor(color);\r\n\r\n    let array255: [number, number, number] | null = null;\r\n\r\n    if (colorObj) {\r\n      const colorCoordsDecimal = colorObj.coords;\r\n\r\n      array255 = [\r\n        Math.round(colorCoordsDecimal[0] * 255),\r\n        Math.round(colorCoordsDecimal[1] * 255),\r\n        Math.round(colorCoordsDecimal[2] * 255),\r\n      ];\r\n    } else {\r\n      console.error(`unable to parse: ${color}`);\r\n    }\r\n\r\n    return array255;\r\n  }\r\n\r\n  createSrgbColor(color: string, lightness: number): string | null {\r\n    let srgbColor: string | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const originalChroma = oklchColor.coords[1];\r\n      const originalHue = oklchColor.coords[2];\r\n\r\n      const targetColor = new Color('oklch', [lightness, originalChroma, originalHue]);\r\n\r\n      // const inSrgbGamut = targetColor.inGamut('srgb');\r\n\r\n      // if (!inSrgbGamut) {\r\n      //   console.warn(\r\n      //     `OKLCH color in SRGB gamut: ${targetColor.inGamut('srgb')}`\r\n      //   );\r\n      // }\r\n\r\n      const tColorInSrgbGamut = targetColor.toGamut({\r\n        space: 'srgb',\r\n        method: 'oklch.c',\r\n      });\r\n\r\n      const targetColorAsRgbColor = tColorInSrgbGamut.to('srgb');\r\n\r\n      srgbColor = targetColorAsRgbColor.toString({ format: 'hex' });\r\n    }\r\n\r\n    return srgbColor;\r\n  }\r\n\r\n  isInSrgbGamut(oklchColorCoord: ColorCoordArray): Promise<boolean> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      try {\r\n        const colorObject = new Color('oklch', oklchColorCoord);\r\n        const variantInGamut = colorObject.inGamut('srgb');\r\n\r\n        resolve(variantInGamut);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  createVariants(color: string): Array<ColorCoordArray> | null {\r\n    let variantCollection: Array<ColorCoordArray> | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const lchCooords = oklchColor.coords;\r\n      const colorChroma = lchCooords[1];\r\n      const colorHue = lchCooords[2];\r\n\r\n      // 1) create enough steps of lightness\r\n      const lightnessSteps = 1000;\r\n      const lightMax = 1;\r\n      const lightMin = 0;\r\n      const lightInterval = (lightMax - lightMin) / lightnessSteps;\r\n\r\n      // 2) create all variants of color using constant chroma and hue.\r\n      variantCollection = [];\r\n\r\n      // 2a) this actually creates `lightnessSteps + 1` variants as initial variant has to start at zero.\r\n      for (let i = 0; i <= lightnessSteps; i++) {\r\n        const variantTargetLight = i * lightInterval;\r\n        const variant: ColorCoordArray = [variantTargetLight, colorChroma, colorHue];\r\n\r\n        variantCollection.push(variant);\r\n      }\r\n    } else {\r\n      console.error(`unable to parse color`);\r\n    }\r\n\r\n    return variantCollection;\r\n  }\r\n\r\n  filterOutOfGamutVariants(\r\n    variants: Array<ColorCoordArray> | null\r\n  ): Promise<Array<ColorCoordArray>> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!variants) {\r\n        reject(`no variants`);\r\n      } else {\r\n        let filteringComplete: boolean = false;\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < variants.length; i++) {\r\n          const curVariant = variants[i];\r\n\r\n          if (await this.isInSrgbGamut(curVariant)) {\r\n            filtered.push(curVariant);\r\n          }\r\n\r\n          if (i === variants.length - 1) filteringComplete = true;\r\n        }\r\n\r\n        if (filteringComplete) {\r\n          resolve(filtered);\r\n        } else {\r\n          reject(`error`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMinMaxLight(color: string): Promise<MinMaxLightObject | null> {\r\n    let returnedObject: MinMaxLightObject | null = null;\r\n\r\n    const initVariantCollection = this.createVariants(color);\r\n\r\n    const variantCollection = await this.filterOutOfGamutVariants(initVariantCollection);\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor && variantCollection.length) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      const lchCooords = oklchColor.coords;\r\n\r\n      const oklchLightCoordIndex = 0;\r\n      const firstArrayItemIndex = 0;\r\n      const lastArrayItemIndex = variantCollection.length - 1;\r\n\r\n      const minLight = variantCollection[firstArrayItemIndex][oklchLightCoordIndex];\r\n      const maxLight = variantCollection[lastArrayItemIndex][oklchLightCoordIndex];\r\n\r\n      returnedObject = {\r\n        originalCoords: lchCooords,\r\n        lightMin: minLight,\r\n        lightMax: maxLight,\r\n      };\r\n    } else {\r\n      if (!parsedColor) {\r\n        console.error(`unable to parse color`);\r\n      } else {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n        const lchCooords = oklchColor.coords;\r\n        returnedObject = {\r\n          originalCoords: lchCooords,\r\n          lightMin: lchCooords[0],\r\n          lightMax: lchCooords[0],\r\n        };\r\n      }\r\n    }\r\n\r\n    return returnedObject;\r\n  }\r\n\r\n  async getRandomColorPair(): Promise<ColorPair> {\r\n    let pair: ColorPair = ['black', 'white'];\r\n\r\n    // ref: oklch.com\r\n    // const targetChroma = 0.11;\r\n    const targetChroma = random(0.11, 0.34, true);\r\n\r\n    const colorOneLight = random(0.25, 0.26, true);\r\n    const colorOneHue = random(0, 360, true);\r\n    const colorTwoLight = random(0.94, 0.95, true);\r\n    const colorTwoHue = random(0, 360, true);\r\n\r\n    const colorOne = new Color('oklch', [colorOneLight, targetChroma, colorOneHue])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const colorTwo = new Color('oklch', [colorTwoLight, targetChroma, colorTwoHue])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const initPair: ColorPair = [colorOne, colorTwo];\r\n\r\n    const chromaMatchedPair = await this.matchChromas(initPair);\r\n\r\n    pair = chromaMatchedPair.colors ? chromaMatchedPair.colors : pair;\r\n\r\n    return pair;\r\n  }\r\n\r\n  // This function only adjust the first color of the pair.\r\n  async adjustColorPairForPresentation(pair: ColorPair): Promise<ColorPair> {\r\n    let returnedPair: ColorPair = ['black', 'white'];\r\n\r\n    const colorOne = pair[0];\r\n    const colortwo = pair[1];\r\n\r\n    const parsedColorOne = this.parseColor(colorOne);\r\n\r\n    const colorOneMinMaxLightObj = await this.getMinMaxLight(colorOne);\r\n\r\n    if (parsedColorOne && colorOneMinMaxLightObj) {\r\n      const colorOneTargetLightness =\r\n        colorOneMinMaxLightObj.lightMin +\r\n        (colorOneMinMaxLightObj.lightMax - colorOneMinMaxLightObj.lightMin) / 2;\r\n\r\n      const oklchColorOne = new Color('srgb', parsedColorOne.coords).to('oklch');\r\n\r\n      const adjColorOne = new Color('oklch', [\r\n        colorOneTargetLightness,\r\n        oklchColorOne.coords[1],\r\n        oklchColorOne.coords[2],\r\n      ])\r\n        .to('srgb')\r\n        .toString({ format: 'hex' });\r\n\r\n      returnedPair = [adjColorOne, colortwo];\r\n    } else {\r\n      console.warn('trouble adjusting colors');\r\n    }\r\n\r\n    return returnedPair;\r\n  }\r\n\r\n  async matchChromas(colorpair: ColorPair): Promise<ChromaMatchObject> {\r\n    let pair: ChromaMatchObject = new ChromaMatchObject();\r\n\r\n    const colorOneParsed = this.parseColor(colorpair[0]);\r\n    const colorTwoParsed = this.parseColor(colorpair[1]);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneOklch = new Color('srgb', colorOneParsed.coords).to('oklch');\r\n      const colorOneChroma = colorOneOklch.coords[1];\r\n\r\n      const colorTwoOklch = new Color('srgb', colorTwoParsed.coords).to('oklch');\r\n      const colorTwoChroma = colorTwoOklch.coords[1];\r\n\r\n      const colorOneCandCoords: ColorCoordArray = [\r\n        colorOneOklch.coords[0],\r\n        colorTwoChroma,\r\n        colorOneOklch.coords[2],\r\n      ];\r\n      const colorTwoCandCoords: ColorCoordArray = [\r\n        colorTwoOklch.coords[0],\r\n        colorOneChroma,\r\n        colorTwoOklch.coords[2],\r\n      ];\r\n\r\n      const colorOneCandInGamut = await this.isInSrgbGamut(colorOneCandCoords);\r\n      const colorTwoCandInGamut = await this.isInSrgbGamut(colorTwoCandCoords);\r\n\r\n      if (colorOneCandInGamut && !colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          new Color('oklch', colorOneCandCoords).to('srgb').toString({ format: 'hex' }),\r\n          colorpair[1],\r\n        ];\r\n\r\n        pair.chroma = colorOneCandCoords[1];\r\n      }\r\n\r\n      if (!colorOneCandInGamut && colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          colorpair[0],\r\n          new Color('oklch', colorTwoCandCoords).to('srgb').toString({ format: 'hex' }),\r\n        ];\r\n\r\n        pair.chroma = colorTwoCandCoords[1];\r\n      }\r\n\r\n      if (colorOneCandInGamut && colorTwoCandInGamut) {\r\n        if (colorOneCandCoords[1] > colorTwoCandCoords[1]) {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            new Color('oklch', colorOneCandCoords).to('srgb').toString({ format: 'hex' }),\r\n            colorpair[1],\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        } else {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            colorpair[0],\r\n            new Color('oklch', colorTwoCandCoords).to('srgb').toString({ format: 'hex' }),\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"color parsing didn't work out. \");\r\n    }\r\n\r\n    return pair;\r\n  }\r\n\r\n  calcDeltaE(colorOne: string, colorTwo: string): number | null {\r\n    let delta: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawDelta = colorOneObj.deltaE2000(colorTwoObj);\r\n\r\n      // const fixedDelta = rawDelta.toFixed(2);\r\n\r\n      // delta = parseFloat(fixedDelta);\r\n      delta = Math.round(rawDelta);\r\n    }\r\n\r\n    return delta;\r\n  }\r\n\r\n  calcWcag2(colorOne: string, colorTwo: string): number | null {\r\n    let wcag21: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawWcag21 = colorOneObj.contrast(colorTwoObj, 'WCAG21');\r\n\r\n      const fixedDelta = rawWcag21.toFixed(1);\r\n\r\n      wcag21 = parseFloat(fixedDelta);\r\n    }\r\n\r\n    return wcag21;\r\n  }\r\n\r\n  getColorMeta(color: string): ColorMetaObj | null {\r\n    let meta: ColorMetaObj | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const lchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      meta = {\r\n        lightness: lchColor.coords[0].toFixed(2),\r\n        chroma: lchColor.coords[1].toFixed(2),\r\n        hue: lchColor.coords[2].toFixed(2),\r\n        saturation: ((lchColor.coords[1] / lchColor.coords[0]) * 100).toFixed(2),\r\n      };\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getMinObjectDimension(apca: number): number {\r\n    let dimension: number = NaN;\r\n\r\n    const absApca = Math.abs(apca);\r\n\r\n    const pixels = [1, 1.5, 2, 3, 4, 6, 8, 10, 15];\r\n    const apcaScores = [90, 75, 60, 50, 45, 30, 25, 20, 15];\r\n    const minLookup = scaleLinear(pixels).domain(apcaScores);\r\n\r\n    const initSize = minLookup(absApca).toFixed(2);\r\n\r\n    dimension = parseFloat(initSize);\r\n\r\n    if (dimension > 15) {\r\n      dimension = 15;\r\n    }\r\n\r\n    if (absApca >= 100) {\r\n      dimension = 0.25;\r\n    }\r\n\r\n    if (absApca < 15) {\r\n      dimension = NaN;\r\n    }\r\n\r\n    return dimension;\r\n  }\r\n\r\n  generateAllOklchVariants(\r\n    color: string,\r\n    lightSteps: number,\r\n    chromaSteps: number\r\n  ): Promise<TableData> {\r\n    return new Promise((resolve, reject) => {\r\n      const parsedColor = this.parseColor(color);\r\n\r\n      const variantsCollection = [];\r\n\r\n      let sortedVariantsCollection = [];\r\n\r\n      if (parsedColor) {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n        const lchCooords = oklchColor.coords;\r\n        const colorLight = lchCooords[0];\r\n        const colorChroma = lchCooords[1];\r\n        const colorHue = lchCooords[2];\r\n\r\n        const lightMax = 1;\r\n        const lightMin = 0;\r\n        const lightInterval = (lightMax - lightMin) / lightSteps;\r\n\r\n        // calculate light levels\r\n        const rawLightLevels = [];\r\n\r\n        let lLevel = colorLight;\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel + lightInterval;\r\n        } while (lLevel <= lightMax);\r\n\r\n        lLevel = colorLight;\r\n\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel - lightInterval;\r\n        } while (lLevel >= lightMin);\r\n\r\n        const sortedLightLevels = sort(uniq(rawLightLevels));\r\n\r\n        const chromaMax = 0.33;\r\n        const chromaMin = 0;\r\n        const chromaInterval = (chromaMax - chromaMin) / chromaSteps;\r\n\r\n        // calculate chroma levels\r\n        const rawChromaLevels = [];\r\n\r\n        let cLevel = colorChroma;\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel + chromaInterval;\r\n        } while (cLevel <= chromaMax);\r\n\r\n        cLevel = colorChroma;\r\n\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel - chromaInterval;\r\n        } while (cLevel >= chromaMin);\r\n\r\n        const sortedChromaLevels = sort(uniq(rawChromaLevels));\r\n\r\n        // generate all rows\r\n        for (let i = 0; i < sortedLightLevels.length; i++) {\r\n          const variantRow: Array<TableColorCell> = [];\r\n\r\n          for (let j = 0; j < sortedChromaLevels.length; j++) {\r\n            const targetLightness = sortedLightLevels[i];\r\n\r\n            const targetChroma = sortedChromaLevels[j];\r\n\r\n            const variantColor = new Color('oklch', [targetLightness, targetChroma, colorHue]);\r\n\r\n            const variantColorinGamut = variantColor.inGamut('srgb');\r\n\r\n            const colorVal = variantColorinGamut\r\n              ? variantColor.to('srgb').toString({ format: 'hex' })\r\n              : '';\r\n\r\n            const deltaE = colorVal ? this.calcDeltaE(colorVal, color) : null;\r\n\r\n            const dLight = colorVal\r\n              ? Math.round(((targetLightness - colorLight) / colorLight) * 100)\r\n              : null;\r\n\r\n            const dChroma = colorVal\r\n              ? Math.round(((targetChroma - colorChroma) / colorChroma) * 100)\r\n              : null;\r\n\r\n            const variantObj: TableColorCell = {\r\n              color: colorVal,\r\n              lightness: targetLightness,\r\n              chroma: targetChroma,\r\n              hue: colorHue,\r\n              deltaE: !deltaE ? NaN : deltaE,\r\n              deltaChroma: !dChroma ? NaN : dChroma,\r\n              deltaLightness: !dLight ? NaN : dLight,\r\n            };\r\n\r\n            variantRow.push(variantObj);\r\n          }\r\n\r\n          variantsCollection.push(variantRow);\r\n        }\r\n      } else {\r\n        console.error(`could not parse color`);\r\n\r\n        reject(`could not parse color`);\r\n      }\r\n\r\n      // order color rows from light to dark\r\n      sortedVariantsCollection = reverse(variantsCollection);\r\n\r\n      resolve(sortedVariantsCollection);\r\n    });\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "properties": [
                {
                    "name": "lightMax",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "lightMin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "originalCoords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorCoordArray",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "NumberKeyLookup",
            "id": "interface-NumberKeyLookup-8766c9abd832330ff17221c3e43e4f777b3c55554086ce9bf7dc7f318c3d832d9fa3b6191da62fb9ccc37f8e2ab2c529eda6683f219957ef7597394d5cfe7a81",
            "file": "src/app/services/color-metrics.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\n\r\nimport { calcAPCA, sRGBtoY } from 'apca-w3';\r\n\r\nimport { scaleLinear } from 'd3';\r\n\r\nimport { ColorUtilService } from './color-util.service';\r\nimport { BpcaService } from './bpca.service';\r\n\r\nexport interface NumberKeyLookup {\r\n  [key: number]: number;\r\n}\r\n\r\nexport type ContrastType = 'apca' | 'bpca';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorMetricsService {\r\n  cus = inject(ColorUtilService);\r\n  bpca = inject(BpcaService);\r\n\r\n  dev: boolean = true;\r\n\r\n  apcaToWcagLookup: NumberKeyLookup = {};\r\n  apcaToWcagLookupAlt: NumberKeyLookup = {};\r\n\r\n  getContrast(\r\n    colorOne: string,\r\n    colorTwo: string,\r\n    contrastType: ContrastType\r\n  ): number | null {\r\n    let score: number | null = null;\r\n\r\n    const contrast = this.calcRawApcaContrast(colorOne, colorTwo);\r\n\r\n    if (contrast || contrast === 0) {\r\n      if (contrastType === 'apca') {\r\n        const roundedContrast = contrast.toFixed(0);\r\n\r\n        score = parseInt(roundedContrast);\r\n      }\r\n\r\n      if (contrastType === 'bpca') {\r\n        const bpcaScore = this.calcRawBpcaContrast(colorOne, colorTwo);\r\n\r\n        score = bpcaScore;\r\n      }\r\n    } else {\r\n      console.error(`Raw APCA contrast was not calculable`);\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  calcRawApcaContrast(colorOne: string, colorTwo: string): number | null {\r\n    let score: number | null = null;\r\n\r\n    score = calcAPCA(colorOne, colorTwo);\r\n\r\n    return score;\r\n  }\r\n\r\n  calcRawBpcaContrast(colorOne: string, colorTwo: string) {\r\n    let wcag: number = NaN;\r\n\r\n    const lc = this.bpca.calcBPCA(colorOne, colorTwo) as number;\r\n    const colorOneArray255 = this.cus.getRgb255Array(colorOne);\r\n    const colorTwoArray255 = this.cus.getRgb255Array(colorTwo);\r\n\r\n    if (colorOneArray255 && colorTwoArray255) {\r\n      const colorOneY = this.bpca.sRGBtoY(colorOneArray255);\r\n      const colorTwoY = this.bpca.sRGBtoY(colorTwoArray255);\r\n\r\n      wcag = parseFloat(this.bpca.bridgeRatio(lc, colorOneY, colorTwoY, ''));\r\n    } else {\r\n      console.warn(`trouble calculating raw BPCA`);\r\n    }\r\n\r\n    return wcag;\r\n  }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-8766c9abd832330ff17221c3e43e4f777b3c55554086ce9bf7dc7f318c3d832d9fa3b6191da62fb9ccc37f8e2ab2c529eda6683f219957ef7597394d5cfe7a81",
                    "args": [
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 182,
            "methods": [],
            "extends": []
        },
        {
            "name": "ResetObject",
            "id": "interface-ResetObject-d618fa4c1318279f8961e3123a73d8570342bd12ce31d9c72b0cf65df12dfb4fa36d858f1f29856b05deafac44cb673498ff0f88ffa0816eb87430a993c0e538",
            "file": "src/app/_components/color-slider/color-slider.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Component,\r\n  input,\r\n  Output,\r\n  EventEmitter,\r\n  inject,\r\n  effect,\r\n  output,\r\n  signal,\r\n  viewChild,\r\n  ElementRef,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ColorUtilService } from '../../services/color-util.service';\r\n\r\nexport interface ResetObject {\r\n  reset: true;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-color-slider',\r\n  templateUrl: './color-slider.component.html',\r\n  styleUrls: ['./color-slider.component.scss'],\r\n  imports: [CommonModule],\r\n  standalone: true,\r\n})\r\nexport class ColorSliderComponent {\r\n  cus = inject(ColorUtilService);\r\n\r\n  debug = input<boolean>(false);\r\n\r\n  slideContainer = viewChild<ElementRef>('sliderContainer');\r\n\r\n  id = input<string | 'slider-0'>('slider-0');\r\n  name = input<string | 'color-slider'>('color-slider');\r\n  color = input<string>('');\r\n  constantChroma = input<boolean>(false);\r\n  showGradient = input<boolean>(false);\r\n  resetSlider = input<ResetObject | null>(null);\r\n\r\n  colorVariant = output<string | null>();\r\n\r\n  devColorVariant = signal<string>('');\r\n  slideMin = signal<number>(NaN);\r\n  slideMax = signal<number>(NaN);\r\n  slideInterval = signal<number>(NaN);\r\n  value = signal<number>(NaN);\r\n  initValue = signal<number>(NaN);\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const boundColor = this.color();\r\n      const showGradient = this.showGradient();\r\n      const resetSlider = this.resetSlider();\r\n      const debug = this.debug();\r\n\r\n      if (!this.slideContainer()) {\r\n        if (debug) {\r\n          console.warn(`no slide container view child yet.`);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (!boundColor) {\r\n        if (debug) {\r\n          console.error(`no color specified`);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (boundColor) {\r\n        this.getAndSetLightnessRange(boundColor, {\r\n          constantChroma: this.constantChroma(),\r\n        });\r\n      }\r\n\r\n      if (showGradient) {\r\n        this.gradient('on');\r\n      }\r\n\r\n      if (!showGradient) {\r\n        this.gradient('off');\r\n      }\r\n\r\n      if (resetSlider && this.initValue()) {\r\n        this.reset();\r\n      }\r\n    });\r\n  }\r\n\r\n  sendInitialLightVariant() {\r\n    const color = this.color();\r\n\r\n    // Good UX to just send the input color?\r\n    this.colorVariant.emit(color);\r\n\r\n    if (this.debug()) {\r\n      this.devColorVariant.set(color);\r\n    }\r\n  }\r\n\r\n  async getAndSetLightnessRange(color: string, options?: { constantChroma: boolean }) {\r\n    const rangeObject = await this.cus.getMinMaxLight(color);\r\n\r\n    if (!rangeObject) {\r\n      console.error(`no range object for color ${color}`);\r\n\r\n      return;\r\n    }\r\n\r\n    this.sendInitialLightVariant();\r\n\r\n    this.slideMin.set(0);\r\n    this.slideMax.set(1);\r\n\r\n    if (options?.constantChroma) {\r\n      this.slideMin.set(rangeObject.lightMin);\r\n\r\n      this.slideMax.set(rangeObject.lightMax);\r\n    }\r\n\r\n    this.slideInterval.set((this.slideMax() - this.slideMin()) / 80);\r\n\r\n    const lightnessIndex = 0;\r\n    const initialSlideValue = rangeObject.originalCoords[lightnessIndex];\r\n\r\n    this.initValue.set(initialSlideValue);\r\n\r\n    this.value.set(initialSlideValue);\r\n\r\n    this.redefineGradientStops(this.slideMin(), this.slideMax());\r\n  }\r\n\r\n  handleSliding(event: Event) {\r\n    const inputElem = event.target as HTMLInputElement;\r\n\r\n    if (inputElem) {\r\n      const lightValue = parseFloat(inputElem.value);\r\n\r\n      const boundColor = this.color();\r\n\r\n      if (boundColor) {\r\n        const lightnessVariant = this.cus.createSrgbColor(boundColor, lightValue);\r\n\r\n        if (this.debug()) {\r\n          console.log(`slide modding ${this.color} to ${lightnessVariant}`);\r\n\r\n          this.devColorVariant.set(!lightnessVariant ? '' : lightnessVariant);\r\n        }\r\n\r\n        this.colorVariant.emit(lightnessVariant);\r\n      } else {\r\n        console.error(`no color specified`);\r\n      }\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    const compId = this.id();\r\n\r\n    // TODO: Isn't there an angular way to do this?\r\n    const element = document.getElementById(compId) as HTMLInputElement;\r\n\r\n    if (this.initValue) {\r\n      element.value = this.initValue.toString();\r\n    } else {\r\n      console.error(`trouble resetting slider, initValue is ${this.initValue}`);\r\n    }\r\n  }\r\n\r\n  gradient(val: 'on' | 'off') {\r\n    const targetElem = this.slideContainer()?.nativeElement as HTMLElement;\r\n\r\n    if (!targetElem) {\r\n      if (this.debug()) {\r\n        console.warn(`no elem to assign gradient to.`);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (val === 'on') {\r\n      targetElem.style.background = 'var(--gradient-background)';\r\n    }\r\n\r\n    if (val === 'off') {\r\n      targetElem.style.background = 'var(--default-background)';\r\n    }\r\n  }\r\n\r\n  redefineVariable(element: HTMLElement, variableName: string, newValue: string) {\r\n    element.style.setProperty(variableName, newValue);\r\n  }\r\n\r\n  redefineGradientStops(lightMin: number, lightMax: number) {\r\n    const compId = this.id();\r\n\r\n    if (this.color()) {\r\n      const targetElement = document.getElementById(`cc-${compId}`) as HTMLElement;\r\n\r\n      const stops = [\r\n        '--grad-stop-0',\r\n        '--grad-stop-1',\r\n        '--grad-stop-2',\r\n        '--grad-stop-3',\r\n        '--grad-stop-4',\r\n        '--grad-stop-5',\r\n      ];\r\n\r\n      // get new stop values\r\n      const stopInterval = (lightMax - lightMin) / (stops.length - 1);\r\n      const stopVals = [];\r\n\r\n      for (let i = 0; i < stops.length; i++) {\r\n        const targetLight = stopInterval * i + lightMin;\r\n        targetLight;\r\n\r\n        const boundColor = this.color();\r\n\r\n        if (!boundColor) {\r\n          console.error(`no color bound to redefine gradient stops with. . .`);\r\n\r\n          break;\r\n        } else {\r\n          const stopColor = this.cus.createSrgbColor(boundColor, targetLight);\r\n\r\n          stopVals.push(stopColor);\r\n        }\r\n      }\r\n\r\n      // assign new stop values\r\n\r\n      for (let i = 0; i < stops.length; i++) {\r\n        const targetStop = stops[i];\r\n        const targetStopVal = stopVals[i];\r\n\r\n        if (targetStopVal) {\r\n          this.redefineVariable(targetElement, targetStop, targetStopVal);\r\n        } else {\r\n          console.log(`no new val to assign`);\r\n        }\r\n      }\r\n    } else {\r\n      console.log(`no color specified`);\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "reset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-23c11020a2831beb3fa02ee911a75b64009c31bb46f73a01145c2560cb13b7f7e641105b678bd8fb01a5a199117001f3da4a78351d29d85d213ed7b82982091f",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "BpcaService",
            "id": "injectable-BpcaService-8d1f7b2a3cf7b6a2c750f0d1119a7e34ac5ba51fe2e343b923b1b32cea17e789357d52ac17f31a181aafca890dd94493d674f3ba4818f7ce9b7d82e49a3f2d8a",
            "file": "src/app/services/bpca.service.ts",
            "properties": [
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "alphaBlend",
                    "args": [
                        {
                            "name": "rgbaFG",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0, 1.0]"
                        },
                        {
                            "name": "rgbBG",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0]"
                        },
                        {
                            "name": "isInt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rgbaFG",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0, 1.0]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rgbBG",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isInt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "BPCAcontrast",
                    "args": [
                        {
                            "name": "txtY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bgY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "places",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "txtY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bgY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "places",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "bridgeRatio",
                    "args": [
                        {
                            "name": "contrastLc",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "txtY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bgY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ratioStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "' to 1'"
                        },
                        {
                            "name": "places",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "contrastLc",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "txtY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bgY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ratioStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "' to 1'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "places",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcBPCA",
                    "args": [
                        {
                            "name": "textColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bgColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "places",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1"
                        },
                        {
                            "name": "isInt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | number",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "textColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bgColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "places",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isInt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sRGBtoY",
                    "args": [
                        {
                            "name": "rgba",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0]"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rgba",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { ColorUtilService } from './color-util.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BpcaService {\r\n  cus = inject(ColorUtilService);\r\n\r\n  // Following Code is copied with some modification from [Bridge-PCA algo](https://github.com/Myndex/bridge-pca/blob/master/src/bridge-pca.js)\r\n  // Attempts to use bpca module as-is has failed because of some issue with colorparsely dependency\r\n\r\n  bridgeRatio(\r\n    contrastLc = 0,\r\n    txtY: number,\r\n    bgY: number,\r\n    ratioStr = ' to 1',\r\n    places = 1\r\n  ) {\r\n    // Takes the output of APCA (either a string or number)\r\n    // and makes it a WCAG2 ratio, returning a string '4.5 to 1'\r\n    // Jan 16 2022 constants\r\n\r\n    let maxY = Math.max(txtY, bgY);\r\n\r\n    const offsetA = 0.2693;\r\n    const preScale = -0.0561;\r\n    const powerShift = 4.537;\r\n\r\n    const mainFactor = 1.113946;\r\n\r\n    const loThresh = 0.3;\r\n    const loExp = 0.48;\r\n    const preEmph = 0.42;\r\n    const postDe = 0.6594;\r\n\r\n    const hiTrim = 0.0785;\r\n    const loTrim = 0.0815;\r\n    const trimThresh = 0.506; // #c0c0c0\r\n\r\n    let addTrim = loTrim + hiTrim;\r\n\r\n    if (maxY > trimThresh) {\r\n      let adjFact = (1.0 - maxY) / (1.0 - trimThresh);\r\n      addTrim = loTrim * adjFact + hiTrim;\r\n    }\r\n\r\n    contrastLc = Math.max(0, Math.abs(contrastLc * 0.01));\r\n    // contrastLc = Math.max(0, Math.abs(parseFloat(contrastLc) * 0.01));\r\n\r\n    // convert Lc into a WCAG ratio\r\n    let wcagContrast =\r\n      (Math.pow(contrastLc + preScale, powerShift) + offsetA) *\r\n        mainFactor *\r\n        contrastLc +\r\n      addTrim;\r\n\r\n    // adjust WCAG ratios that are under  3 : 1, clean up near 0.\r\n    wcagContrast =\r\n      wcagContrast > loThresh\r\n        ? 10.0 * wcagContrast\r\n        : contrastLc < 0.06\r\n        ? 0\r\n        : 10.0 * wcagContrast -\r\n          (Math.pow(loThresh - wcagContrast + preEmph, loExp) - postDe);\r\n\r\n    return wcagContrast.toFixed(places) + ratioStr; // + '<br>trim:' + addTrim;\r\n  }\r\n\r\n  BPCAcontrast(txtY: number, bgY: number, places = -1) {\r\n    // send linear Y (luminance) for text and background.\r\n    // txtY and bgY must be between 0.0-1.0\r\n    // IMPORTANT: Do not swap, polarity is important.\r\n\r\n    const icp = [0.0, 1.1]; // input range clamp / input error check\r\n\r\n    if (\r\n      isNaN(txtY) ||\r\n      isNaN(bgY) ||\r\n      Math.min(txtY, bgY) < icp[0] ||\r\n      Math.max(txtY, bgY) > icp[1]\r\n    ) {\r\n      return 0; // return zero on error\r\n      // return 'error'; // optional string return for error\r\n    }\r\n\r\n    //////////   BPCA 0.1.6 G - 4g Constants   ///////////////////////\r\n\r\n    const normBG = 0.56,\r\n      normTXT = 0.57,\r\n      revTXT = 0.62,\r\n      revBG = 0.65; // G-4g constants for use with 2.4 exponent\r\n\r\n    const blkThrs = 0.022,\r\n      blkClmp = 1.414,\r\n      scaleBoW = 1.14,\r\n      scaleWoB = 1.14,\r\n      loBoWoffset = 0.027,\r\n      loWoBoffset = 0.027,\r\n      bridgeWoBfact = 0.1414,\r\n      bridgeWoBpivot = 0.84,\r\n      loClip = 0.1,\r\n      deltaYmin = 0.0005;\r\n\r\n    //////////   SAPC LOCAL VARS   /////////////////////////////////////////\r\n\r\n    let SAPC = 0.0; // For raw SAPC values\r\n    let outputContrast = 0.0; // For weighted final values\r\n    let polCat = 'BoW'; // Polarity Indicator. N normal R reverse\r\n\r\n    // TUTORIAL\r\n\r\n    // Use Y for text and BG, and soft clamp black,\r\n    // return 0 for very close luminances, determine\r\n    // polarity, and calculate SAPC raw contrast\r\n    // Then scale for easy to remember levels.\r\n\r\n    // Note that reverse contrast (white text on black)\r\n    // intentionally returns a negative number\r\n    // Proper polarity is important!\r\n\r\n    //////////   BLACK SOFT CLAMP   ////////////////////////////////////////\r\n\r\n    // Soft clamps Y for either color if it is near black.\r\n    txtY = txtY > blkThrs ? txtY : txtY + Math.pow(blkThrs - txtY, blkClmp);\r\n    bgY = bgY > blkThrs ? bgY : bgY + Math.pow(blkThrs - bgY, blkClmp);\r\n\r\n    ///// Return 0 Early for extremely low ∆Y\r\n    if (Math.abs(bgY - txtY) < deltaYmin) {\r\n      return 0.0;\r\n    }\r\n\r\n    //////////   Bridge-PCA/SAPC CONTRAST - LOW CLIP (W3 LICENSE)  ///////////////\r\n\r\n    if (bgY > txtY) {\r\n      // For normal polarity, black text on white (BoW)\r\n\r\n      // Calculate the SAPC contrast value and scale\r\n\r\n      SAPC = (Math.pow(bgY, normBG) - Math.pow(txtY, normTXT)) * scaleBoW;\r\n\r\n      // Low Clip to prevent polarity reversal\r\n      outputContrast = SAPC < loClip ? 0.0 : SAPC - loBoWoffset;\r\n    } else {\r\n      // For reverse polarity, light text on dark (WoB)\r\n      // WoB should always return either negative value.\r\n      // OR the output will have R appended as string '23R'\r\n      // OR WoB '23 BoW' toolmaker choice so long as explained\r\n      polCat = 'WoB';\r\n\r\n      SAPC = (Math.pow(bgY, revBG) - Math.pow(txtY, revTXT)) * scaleWoB;\r\n\r\n      // this is a special offset to align with incorrect WCAG_2 math.\r\n      let bridge = Math.max(0, txtY / bridgeWoBpivot - 1.0) * bridgeWoBfact;\r\n\r\n      // console.log(bridge + ' txtY ' + txtY + ' SAPC ' + SAPC);\r\n\r\n      outputContrast = SAPC > -loClip ? 0.0 : SAPC + loWoBoffset + bridge;\r\n    }\r\n\r\n    // return Lc (lightness contrast) as a signed numeric value\r\n    // Round to the nearest whole number is optional.\r\n    // Rounded can be a signed INT as output will be within ± 127\r\n    // places = -1 returns signed float, 0 returns rounded as string\r\n\r\n    if (places < 0) {\r\n      return outputContrast * 100.0;\r\n    } else if (places == 0) {\r\n      return (\r\n        Math.round(Math.abs(outputContrast) * 100.0) +\r\n        '<sub>' +\r\n        polCat +\r\n        '</sub>'\r\n      );\r\n    } else if (Number.isInteger(places)) {\r\n      return (outputContrast * 100.0).toFixed(places);\r\n    } else {\r\n      throw 'Err-3';\r\n    }\r\n  } // End BPCAcontrast()\r\n\r\n  sRGBtoY(rgba = [0, 0, 0]) {\r\n    // send sRGB 8bpc (0xFFFFFF) or string\r\n\r\n    /////   Bridge-PCA 0.1.6 G - 4g - W3 Constants   ////////////////////////\r\n\r\n    const mainTRC = 2.4; // 2.4 exponent emulates actual monitor perception\r\n\r\n    const sRco = 0.212647813391364,\r\n      sGco = 0.715179147533615,\r\n      sBco = 0.0721730390750208; // sRGB coefficients\r\n\r\n    // Derived from:\r\n    // xW\tyW\tK\txR\tyR\txG\tyG\txB\tyB\r\n    // 0.312720\t0.329030\t6504\t0.640\t0.330\t0.300\t0.600\t0.150\t0.060\r\n\r\n    // linearize r, g, or b then apply coefficients\r\n    // and sum then return the resulting luminance\r\n\r\n    function simpleExp(chan: number) {\r\n      return Math.pow(chan / 255.0, mainTRC);\r\n    }\r\n\r\n    return (\r\n      sRco * simpleExp(rgba[0]) +\r\n      sGco * simpleExp(rgba[1]) +\r\n      sBco * simpleExp(rgba[2])\r\n    );\r\n  } // End sRGBtoY()\r\n\r\n  alphaBlend(rgbaFG = [0, 0, 0, 1.0], rgbBG = [0, 0, 0], isInt = true) {\r\n    if (rgbaFG[3]) {\r\n      rgbaFG[3] = Math.max(Math.min(rgbaFG[3], 1.0), 0.0); // clamp alpha\r\n      let compBlend = 1.0 - rgbaFG[3];\r\n      let rgbOut = [0, 0, 0]; // or just use rgbBG to retain other elements?\r\n\r\n      for (let i = 0; i < 3; i++) {\r\n        rgbOut[i] = rgbBG[i] * compBlend + rgbaFG[i] * rgbaFG[3];\r\n        if (isInt) rgbOut[i] = Math.min(Math.round(rgbOut[i]), 255);\r\n      }\r\n\r\n      return rgbOut;\r\n    } else {\r\n      return rgbaFG;\r\n    }\r\n  } // End alphaBlend()\r\n\r\n  calcBPCA(textColor: string, bgColor: string, places = -1, isInt = true) {\r\n    // NOTE:  that this function required colorParsley !!\r\n    // let txClr = colorParsley(textColor);\r\n    // let bgClr = colorParsley(bgColor);\r\n    // let hasAlpha = txClr[3] != '' && txClr[3] < 1 ? true : false;\r\n    // if (hasAlpha) {\r\n    // txClr = this.alphaBlend(txClr, bgClr, isInt);\r\n    // }\r\n    // return this.BPCAcontrast(this.sRGBtoY(txClr), this.sRGBtoY(bgClr), places);\r\n\r\n    let bpca: string | number = NaN;\r\n\r\n    let txClr = this.cus.getRgb255Array(textColor);\r\n    let bgClr = this.cus.getRgb255Array(bgColor);\r\n\r\n    if (txClr && bgClr) {\r\n      bpca = this.BPCAcontrast(\r\n        this.sRGBtoY(txClr),\r\n        this.sRGBtoY(bgClr),\r\n        places\r\n      );\r\n    } else {\r\n      console.warn(`issue calculating BPCA`);\r\n    }\r\n\r\n    return bpca;\r\n  } // End calcBPCA()\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ColorMetricsService",
            "id": "injectable-ColorMetricsService-8766c9abd832330ff17221c3e43e4f777b3c55554086ce9bf7dc7f318c3d832d9fa3b6191da62fb9ccc37f8e2ab2c529eda6683f219957ef7597394d5cfe7a81",
            "file": "src/app/services/color-metrics.service.ts",
            "properties": [
                {
                    "name": "apcaToWcagLookup",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumberKeyLookup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "apcaToWcagLookupAlt",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumberKeyLookup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "bpca",
                    "defaultValue": "inject(BpcaService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dev",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "calcRawApcaContrast",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcRawBpcaContrast",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getContrast",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contrastType",
                            "type": "ContrastType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contrastType",
                            "type": "ContrastType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\n\r\nimport { calcAPCA, sRGBtoY } from 'apca-w3';\r\n\r\nimport { scaleLinear } from 'd3';\r\n\r\nimport { ColorUtilService } from './color-util.service';\r\nimport { BpcaService } from './bpca.service';\r\n\r\nexport interface NumberKeyLookup {\r\n  [key: number]: number;\r\n}\r\n\r\nexport type ContrastType = 'apca' | 'bpca';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorMetricsService {\r\n  cus = inject(ColorUtilService);\r\n  bpca = inject(BpcaService);\r\n\r\n  dev: boolean = true;\r\n\r\n  apcaToWcagLookup: NumberKeyLookup = {};\r\n  apcaToWcagLookupAlt: NumberKeyLookup = {};\r\n\r\n  getContrast(\r\n    colorOne: string,\r\n    colorTwo: string,\r\n    contrastType: ContrastType\r\n  ): number | null {\r\n    let score: number | null = null;\r\n\r\n    const contrast = this.calcRawApcaContrast(colorOne, colorTwo);\r\n\r\n    if (contrast || contrast === 0) {\r\n      if (contrastType === 'apca') {\r\n        const roundedContrast = contrast.toFixed(0);\r\n\r\n        score = parseInt(roundedContrast);\r\n      }\r\n\r\n      if (contrastType === 'bpca') {\r\n        const bpcaScore = this.calcRawBpcaContrast(colorOne, colorTwo);\r\n\r\n        score = bpcaScore;\r\n      }\r\n    } else {\r\n      console.error(`Raw APCA contrast was not calculable`);\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  calcRawApcaContrast(colorOne: string, colorTwo: string): number | null {\r\n    let score: number | null = null;\r\n\r\n    score = calcAPCA(colorOne, colorTwo);\r\n\r\n    return score;\r\n  }\r\n\r\n  calcRawBpcaContrast(colorOne: string, colorTwo: string) {\r\n    let wcag: number = NaN;\r\n\r\n    const lc = this.bpca.calcBPCA(colorOne, colorTwo) as number;\r\n    const colorOneArray255 = this.cus.getRgb255Array(colorOne);\r\n    const colorTwoArray255 = this.cus.getRgb255Array(colorTwo);\r\n\r\n    if (colorOneArray255 && colorTwoArray255) {\r\n      const colorOneY = this.bpca.sRGBtoY(colorOneArray255);\r\n      const colorTwoY = this.bpca.sRGBtoY(colorTwoArray255);\r\n\r\n      wcag = parseFloat(this.bpca.bridgeRatio(lc, colorOneY, colorTwoY, ''));\r\n    } else {\r\n      console.warn(`trouble calculating raw BPCA`);\r\n    }\r\n\r\n    return wcag;\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ColorUtilService",
            "id": "injectable-ColorUtilService-710c7cdd66ee9d4aba8c39f8172f2b9dbc1018de02ff2ffeb2a495d298556ab16dde6518d9a7bd0e0250a9f07afc771fa345ca80cf79a90c0aa88735f662cb9b",
            "file": "src/app/services/color-util.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "adjustColorPairForPresentation",
                    "args": [
                        {
                            "name": "pair",
                            "type": "ColorPair",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ColorPair>",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "pair",
                            "type": "ColorPair",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcDeltaE",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcWcag2",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSrgbColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lightness",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lightness",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createVariants",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array | null",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterOutOfGamutVariants",
                    "args": [
                        {
                            "name": "variants",
                            "type": "Array<ColorCoordArray> | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<ColorCoordArray>>",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "variants",
                            "type": "Array<ColorCoordArray> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateAllOklchVariants",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lightSteps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chromaSteps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TableData>",
                    "typeParameters": [],
                    "line": 454,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lightSteps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chromaSteps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColorMeta",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ColorMetaObj | null",
                    "typeParameters": [],
                    "line": 407,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinMaxLight",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<MinMaxLightObject | null>",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinObjectDimension",
                    "args": [
                        {
                            "name": "apca",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 426,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apca",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomColorPair",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<ColorPair>",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getRgb255Array",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[number, number, number]",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isInSrgbGamut",
                    "args": [
                        {
                            "name": "oklchColorCoord",
                            "type": "ColorCoordArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "oklchColorCoord",
                            "type": "ColorCoordArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "matchChromas",
                    "args": [
                        {
                            "name": "colorpair",
                            "type": "ColorPair",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ChromaMatchObject>",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "colorpair",
                            "type": "ColorPair",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ColorConstructor | null",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Color from 'colorjs.io';\r\nimport { to } from 'colorjs.io/fn';\r\n// import { ColorConstructor } from 'colorjs.io/types/src/color';\r\nimport { ColorConstructor } from 'colorjs.io';\r\nimport { scaleLinear, sort } from 'd3';\r\nimport { random, reverse, uniqBy, uniq } from 'lodash';\r\nimport { TableColorCell, TableData } from '../_components/palette-table/palette-table.component';\r\n\r\nexport type ColorPair = [string, string];\r\n\r\nexport type ColorCoordArray = [number, number, number];\r\n\r\nexport class ChromaMatchObject {\r\n  success: boolean = false;\r\n  colors: ColorPair | null = null;\r\n  chroma: number = NaN;\r\n}\r\n\r\nexport interface MinMaxLightObject {\r\n  originalCoords: ColorCoordArray;\r\n  lightMin: number;\r\n  lightMax: number;\r\n}\r\n\r\n// export type ColorVariant = [number, number, number];\r\n\r\nexport interface ColorMetaObj {\r\n  lightness: number | string;\r\n  chroma: number | string;\r\n  hue: number | string;\r\n  saturation: number | string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  parseColor(color: string): ColorConstructor | null {\r\n    let parsedColor: ColorConstructor | null = null;\r\n\r\n    try {\r\n      parsedColor = Color.parse(color);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return parsedColor;\r\n  }\r\n\r\n  getRgb255Array(color: string) {\r\n    const colorObj = this.parseColor(color);\r\n\r\n    let array255: [number, number, number] | null = null;\r\n\r\n    if (colorObj) {\r\n      const colorCoordsDecimal = colorObj.coords;\r\n\r\n      array255 = [\r\n        Math.round(colorCoordsDecimal[0] * 255),\r\n        Math.round(colorCoordsDecimal[1] * 255),\r\n        Math.round(colorCoordsDecimal[2] * 255),\r\n      ];\r\n    } else {\r\n      console.error(`unable to parse: ${color}`);\r\n    }\r\n\r\n    return array255;\r\n  }\r\n\r\n  createSrgbColor(color: string, lightness: number): string | null {\r\n    let srgbColor: string | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const originalChroma = oklchColor.coords[1];\r\n      const originalHue = oklchColor.coords[2];\r\n\r\n      const targetColor = new Color('oklch', [lightness, originalChroma, originalHue]);\r\n\r\n      // const inSrgbGamut = targetColor.inGamut('srgb');\r\n\r\n      // if (!inSrgbGamut) {\r\n      //   console.warn(\r\n      //     `OKLCH color in SRGB gamut: ${targetColor.inGamut('srgb')}`\r\n      //   );\r\n      // }\r\n\r\n      const tColorInSrgbGamut = targetColor.toGamut({\r\n        space: 'srgb',\r\n        method: 'oklch.c',\r\n      });\r\n\r\n      const targetColorAsRgbColor = tColorInSrgbGamut.to('srgb');\r\n\r\n      srgbColor = targetColorAsRgbColor.toString({ format: 'hex' });\r\n    }\r\n\r\n    return srgbColor;\r\n  }\r\n\r\n  isInSrgbGamut(oklchColorCoord: ColorCoordArray): Promise<boolean> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      try {\r\n        const colorObject = new Color('oklch', oklchColorCoord);\r\n        const variantInGamut = colorObject.inGamut('srgb');\r\n\r\n        resolve(variantInGamut);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  createVariants(color: string): Array<ColorCoordArray> | null {\r\n    let variantCollection: Array<ColorCoordArray> | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const lchCooords = oklchColor.coords;\r\n      const colorChroma = lchCooords[1];\r\n      const colorHue = lchCooords[2];\r\n\r\n      // 1) create enough steps of lightness\r\n      const lightnessSteps = 1000;\r\n      const lightMax = 1;\r\n      const lightMin = 0;\r\n      const lightInterval = (lightMax - lightMin) / lightnessSteps;\r\n\r\n      // 2) create all variants of color using constant chroma and hue.\r\n      variantCollection = [];\r\n\r\n      // 2a) this actually creates `lightnessSteps + 1` variants as initial variant has to start at zero.\r\n      for (let i = 0; i <= lightnessSteps; i++) {\r\n        const variantTargetLight = i * lightInterval;\r\n        const variant: ColorCoordArray = [variantTargetLight, colorChroma, colorHue];\r\n\r\n        variantCollection.push(variant);\r\n      }\r\n    } else {\r\n      console.error(`unable to parse color`);\r\n    }\r\n\r\n    return variantCollection;\r\n  }\r\n\r\n  filterOutOfGamutVariants(\r\n    variants: Array<ColorCoordArray> | null\r\n  ): Promise<Array<ColorCoordArray>> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!variants) {\r\n        reject(`no variants`);\r\n      } else {\r\n        let filteringComplete: boolean = false;\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < variants.length; i++) {\r\n          const curVariant = variants[i];\r\n\r\n          if (await this.isInSrgbGamut(curVariant)) {\r\n            filtered.push(curVariant);\r\n          }\r\n\r\n          if (i === variants.length - 1) filteringComplete = true;\r\n        }\r\n\r\n        if (filteringComplete) {\r\n          resolve(filtered);\r\n        } else {\r\n          reject(`error`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMinMaxLight(color: string): Promise<MinMaxLightObject | null> {\r\n    let returnedObject: MinMaxLightObject | null = null;\r\n\r\n    const initVariantCollection = this.createVariants(color);\r\n\r\n    const variantCollection = await this.filterOutOfGamutVariants(initVariantCollection);\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor && variantCollection.length) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      const lchCooords = oklchColor.coords;\r\n\r\n      const oklchLightCoordIndex = 0;\r\n      const firstArrayItemIndex = 0;\r\n      const lastArrayItemIndex = variantCollection.length - 1;\r\n\r\n      const minLight = variantCollection[firstArrayItemIndex][oklchLightCoordIndex];\r\n      const maxLight = variantCollection[lastArrayItemIndex][oklchLightCoordIndex];\r\n\r\n      returnedObject = {\r\n        originalCoords: lchCooords,\r\n        lightMin: minLight,\r\n        lightMax: maxLight,\r\n      };\r\n    } else {\r\n      if (!parsedColor) {\r\n        console.error(`unable to parse color`);\r\n      } else {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n        const lchCooords = oklchColor.coords;\r\n        returnedObject = {\r\n          originalCoords: lchCooords,\r\n          lightMin: lchCooords[0],\r\n          lightMax: lchCooords[0],\r\n        };\r\n      }\r\n    }\r\n\r\n    return returnedObject;\r\n  }\r\n\r\n  async getRandomColorPair(): Promise<ColorPair> {\r\n    let pair: ColorPair = ['black', 'white'];\r\n\r\n    // ref: oklch.com\r\n    // const targetChroma = 0.11;\r\n    const targetChroma = random(0.11, 0.34, true);\r\n\r\n    const colorOneLight = random(0.25, 0.26, true);\r\n    const colorOneHue = random(0, 360, true);\r\n    const colorTwoLight = random(0.94, 0.95, true);\r\n    const colorTwoHue = random(0, 360, true);\r\n\r\n    const colorOne = new Color('oklch', [colorOneLight, targetChroma, colorOneHue])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const colorTwo = new Color('oklch', [colorTwoLight, targetChroma, colorTwoHue])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const initPair: ColorPair = [colorOne, colorTwo];\r\n\r\n    const chromaMatchedPair = await this.matchChromas(initPair);\r\n\r\n    pair = chromaMatchedPair.colors ? chromaMatchedPair.colors : pair;\r\n\r\n    return pair;\r\n  }\r\n\r\n  // This function only adjust the first color of the pair.\r\n  async adjustColorPairForPresentation(pair: ColorPair): Promise<ColorPair> {\r\n    let returnedPair: ColorPair = ['black', 'white'];\r\n\r\n    const colorOne = pair[0];\r\n    const colortwo = pair[1];\r\n\r\n    const parsedColorOne = this.parseColor(colorOne);\r\n\r\n    const colorOneMinMaxLightObj = await this.getMinMaxLight(colorOne);\r\n\r\n    if (parsedColorOne && colorOneMinMaxLightObj) {\r\n      const colorOneTargetLightness =\r\n        colorOneMinMaxLightObj.lightMin +\r\n        (colorOneMinMaxLightObj.lightMax - colorOneMinMaxLightObj.lightMin) / 2;\r\n\r\n      const oklchColorOne = new Color('srgb', parsedColorOne.coords).to('oklch');\r\n\r\n      const adjColorOne = new Color('oklch', [\r\n        colorOneTargetLightness,\r\n        oklchColorOne.coords[1],\r\n        oklchColorOne.coords[2],\r\n      ])\r\n        .to('srgb')\r\n        .toString({ format: 'hex' });\r\n\r\n      returnedPair = [adjColorOne, colortwo];\r\n    } else {\r\n      console.warn('trouble adjusting colors');\r\n    }\r\n\r\n    return returnedPair;\r\n  }\r\n\r\n  async matchChromas(colorpair: ColorPair): Promise<ChromaMatchObject> {\r\n    let pair: ChromaMatchObject = new ChromaMatchObject();\r\n\r\n    const colorOneParsed = this.parseColor(colorpair[0]);\r\n    const colorTwoParsed = this.parseColor(colorpair[1]);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneOklch = new Color('srgb', colorOneParsed.coords).to('oklch');\r\n      const colorOneChroma = colorOneOklch.coords[1];\r\n\r\n      const colorTwoOklch = new Color('srgb', colorTwoParsed.coords).to('oklch');\r\n      const colorTwoChroma = colorTwoOklch.coords[1];\r\n\r\n      const colorOneCandCoords: ColorCoordArray = [\r\n        colorOneOklch.coords[0],\r\n        colorTwoChroma,\r\n        colorOneOklch.coords[2],\r\n      ];\r\n      const colorTwoCandCoords: ColorCoordArray = [\r\n        colorTwoOklch.coords[0],\r\n        colorOneChroma,\r\n        colorTwoOklch.coords[2],\r\n      ];\r\n\r\n      const colorOneCandInGamut = await this.isInSrgbGamut(colorOneCandCoords);\r\n      const colorTwoCandInGamut = await this.isInSrgbGamut(colorTwoCandCoords);\r\n\r\n      if (colorOneCandInGamut && !colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          new Color('oklch', colorOneCandCoords).to('srgb').toString({ format: 'hex' }),\r\n          colorpair[1],\r\n        ];\r\n\r\n        pair.chroma = colorOneCandCoords[1];\r\n      }\r\n\r\n      if (!colorOneCandInGamut && colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          colorpair[0],\r\n          new Color('oklch', colorTwoCandCoords).to('srgb').toString({ format: 'hex' }),\r\n        ];\r\n\r\n        pair.chroma = colorTwoCandCoords[1];\r\n      }\r\n\r\n      if (colorOneCandInGamut && colorTwoCandInGamut) {\r\n        if (colorOneCandCoords[1] > colorTwoCandCoords[1]) {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            new Color('oklch', colorOneCandCoords).to('srgb').toString({ format: 'hex' }),\r\n            colorpair[1],\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        } else {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            colorpair[0],\r\n            new Color('oklch', colorTwoCandCoords).to('srgb').toString({ format: 'hex' }),\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"color parsing didn't work out. \");\r\n    }\r\n\r\n    return pair;\r\n  }\r\n\r\n  calcDeltaE(colorOne: string, colorTwo: string): number | null {\r\n    let delta: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawDelta = colorOneObj.deltaE2000(colorTwoObj);\r\n\r\n      // const fixedDelta = rawDelta.toFixed(2);\r\n\r\n      // delta = parseFloat(fixedDelta);\r\n      delta = Math.round(rawDelta);\r\n    }\r\n\r\n    return delta;\r\n  }\r\n\r\n  calcWcag2(colorOne: string, colorTwo: string): number | null {\r\n    let wcag21: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawWcag21 = colorOneObj.contrast(colorTwoObj, 'WCAG21');\r\n\r\n      const fixedDelta = rawWcag21.toFixed(1);\r\n\r\n      wcag21 = parseFloat(fixedDelta);\r\n    }\r\n\r\n    return wcag21;\r\n  }\r\n\r\n  getColorMeta(color: string): ColorMetaObj | null {\r\n    let meta: ColorMetaObj | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const lchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      meta = {\r\n        lightness: lchColor.coords[0].toFixed(2),\r\n        chroma: lchColor.coords[1].toFixed(2),\r\n        hue: lchColor.coords[2].toFixed(2),\r\n        saturation: ((lchColor.coords[1] / lchColor.coords[0]) * 100).toFixed(2),\r\n      };\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getMinObjectDimension(apca: number): number {\r\n    let dimension: number = NaN;\r\n\r\n    const absApca = Math.abs(apca);\r\n\r\n    const pixels = [1, 1.5, 2, 3, 4, 6, 8, 10, 15];\r\n    const apcaScores = [90, 75, 60, 50, 45, 30, 25, 20, 15];\r\n    const minLookup = scaleLinear(pixels).domain(apcaScores);\r\n\r\n    const initSize = minLookup(absApca).toFixed(2);\r\n\r\n    dimension = parseFloat(initSize);\r\n\r\n    if (dimension > 15) {\r\n      dimension = 15;\r\n    }\r\n\r\n    if (absApca >= 100) {\r\n      dimension = 0.25;\r\n    }\r\n\r\n    if (absApca < 15) {\r\n      dimension = NaN;\r\n    }\r\n\r\n    return dimension;\r\n  }\r\n\r\n  generateAllOklchVariants(\r\n    color: string,\r\n    lightSteps: number,\r\n    chromaSteps: number\r\n  ): Promise<TableData> {\r\n    return new Promise((resolve, reject) => {\r\n      const parsedColor = this.parseColor(color);\r\n\r\n      const variantsCollection = [];\r\n\r\n      let sortedVariantsCollection = [];\r\n\r\n      if (parsedColor) {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n        const lchCooords = oklchColor.coords;\r\n        const colorLight = lchCooords[0];\r\n        const colorChroma = lchCooords[1];\r\n        const colorHue = lchCooords[2];\r\n\r\n        const lightMax = 1;\r\n        const lightMin = 0;\r\n        const lightInterval = (lightMax - lightMin) / lightSteps;\r\n\r\n        // calculate light levels\r\n        const rawLightLevels = [];\r\n\r\n        let lLevel = colorLight;\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel + lightInterval;\r\n        } while (lLevel <= lightMax);\r\n\r\n        lLevel = colorLight;\r\n\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel - lightInterval;\r\n        } while (lLevel >= lightMin);\r\n\r\n        const sortedLightLevels = sort(uniq(rawLightLevels));\r\n\r\n        const chromaMax = 0.33;\r\n        const chromaMin = 0;\r\n        const chromaInterval = (chromaMax - chromaMin) / chromaSteps;\r\n\r\n        // calculate chroma levels\r\n        const rawChromaLevels = [];\r\n\r\n        let cLevel = colorChroma;\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel + chromaInterval;\r\n        } while (cLevel <= chromaMax);\r\n\r\n        cLevel = colorChroma;\r\n\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel - chromaInterval;\r\n        } while (cLevel >= chromaMin);\r\n\r\n        const sortedChromaLevels = sort(uniq(rawChromaLevels));\r\n\r\n        // generate all rows\r\n        for (let i = 0; i < sortedLightLevels.length; i++) {\r\n          const variantRow: Array<TableColorCell> = [];\r\n\r\n          for (let j = 0; j < sortedChromaLevels.length; j++) {\r\n            const targetLightness = sortedLightLevels[i];\r\n\r\n            const targetChroma = sortedChromaLevels[j];\r\n\r\n            const variantColor = new Color('oklch', [targetLightness, targetChroma, colorHue]);\r\n\r\n            const variantColorinGamut = variantColor.inGamut('srgb');\r\n\r\n            const colorVal = variantColorinGamut\r\n              ? variantColor.to('srgb').toString({ format: 'hex' })\r\n              : '';\r\n\r\n            const deltaE = colorVal ? this.calcDeltaE(colorVal, color) : null;\r\n\r\n            const dLight = colorVal\r\n              ? Math.round(((targetLightness - colorLight) / colorLight) * 100)\r\n              : null;\r\n\r\n            const dChroma = colorVal\r\n              ? Math.round(((targetChroma - colorChroma) / colorChroma) * 100)\r\n              : null;\r\n\r\n            const variantObj: TableColorCell = {\r\n              color: colorVal,\r\n              lightness: targetLightness,\r\n              chroma: targetChroma,\r\n              hue: colorHue,\r\n              deltaE: !deltaE ? NaN : deltaE,\r\n              deltaChroma: !dChroma ? NaN : dChroma,\r\n              deltaLightness: !dLight ? NaN : dLight,\r\n            };\r\n\r\n            variantRow.push(variantObj);\r\n          }\r\n\r\n          variantsCollection.push(variantRow);\r\n        }\r\n      } else {\r\n        console.error(`could not parse color`);\r\n\r\n        reject(`could not parse color`);\r\n      }\r\n\r\n      // order color rows from light to dark\r\n      sortedVariantsCollection = reverse(variantsCollection);\r\n\r\n      resolve(sortedVariantsCollection);\r\n    });\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 574
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AlertMessagObj",
            "id": "class-AlertMessagObj-cb844c208e5c35bbf9a938ca36cb9934d1d3476d8102c0e4d76d9a3dbc09e0488e63303244023084d133ced8680d03d48ec98d722cb07a01911188cbfd9fb2f1",
            "file": "src/app/_components/alert/alert.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, EventEmitter, input, effect, Output, signal, output } from '@angular/core';\r\nimport { random, set, times } from 'lodash-es';\r\n\r\nexport class AlertMessagObj {\r\n  message: string = '';\r\n}\r\n\r\n@Component({\r\n  selector: 'app-alert',\r\n  templateUrl: './alert.component.html',\r\n  styleUrls: ['./alert.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class AlertComponent {\r\n  alertMessage = input<AlertMessagObj>(new AlertMessagObj());\r\n\r\n  alertClosed = output<boolean>();\r\n\r\n  showAlert = signal<boolean>(false);\r\n  uniqId = signal<string>('');\r\n\r\n  timeout: number = NaN;\r\n\r\n  generateRandomString(length: number) {\r\n    return times(length, () => random(35).toString(36)).join('');\r\n  }\r\n\r\n  hideAlert() {\r\n    this.showAlert.set(false);\r\n\r\n    this.uniqId.set('');\r\n\r\n    this.alertClosed.emit(true);\r\n  }\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const alertMessage = this.alertMessage();\r\n\r\n      if (alertMessage.message) {\r\n        this.uniqId.set(this.generateRandomString(12));\r\n\r\n        this.showAlert.set(true);\r\n\r\n        if (this.timeout) {\r\n          clearTimeout(this.timeout);\r\n        }\r\n\r\n        this.timeout = setTimeout(() => {\r\n          this.showAlert.set(false);\r\n        }, 5000) as unknown as number;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChromaMatchObject",
            "id": "class-ChromaMatchObject-710c7cdd66ee9d4aba8c39f8172f2b9dbc1018de02ff2ffeb2a495d298556ab16dde6518d9a7bd0e0250a9f07afc771fa345ca80cf79a90c0aa88735f662cb9b",
            "file": "src/app/services/color-util.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Color from 'colorjs.io';\r\nimport { to } from 'colorjs.io/fn';\r\n// import { ColorConstructor } from 'colorjs.io/types/src/color';\r\nimport { ColorConstructor } from 'colorjs.io';\r\nimport { scaleLinear, sort } from 'd3';\r\nimport { random, reverse, uniqBy, uniq } from 'lodash';\r\nimport { TableColorCell, TableData } from '../_components/palette-table/palette-table.component';\r\n\r\nexport type ColorPair = [string, string];\r\n\r\nexport type ColorCoordArray = [number, number, number];\r\n\r\nexport class ChromaMatchObject {\r\n  success: boolean = false;\r\n  colors: ColorPair | null = null;\r\n  chroma: number = NaN;\r\n}\r\n\r\nexport interface MinMaxLightObject {\r\n  originalCoords: ColorCoordArray;\r\n  lightMin: number;\r\n  lightMax: number;\r\n}\r\n\r\n// export type ColorVariant = [number, number, number];\r\n\r\nexport interface ColorMetaObj {\r\n  lightness: number | string;\r\n  chroma: number | string;\r\n  hue: number | string;\r\n  saturation: number | string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  parseColor(color: string): ColorConstructor | null {\r\n    let parsedColor: ColorConstructor | null = null;\r\n\r\n    try {\r\n      parsedColor = Color.parse(color);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return parsedColor;\r\n  }\r\n\r\n  getRgb255Array(color: string) {\r\n    const colorObj = this.parseColor(color);\r\n\r\n    let array255: [number, number, number] | null = null;\r\n\r\n    if (colorObj) {\r\n      const colorCoordsDecimal = colorObj.coords;\r\n\r\n      array255 = [\r\n        Math.round(colorCoordsDecimal[0] * 255),\r\n        Math.round(colorCoordsDecimal[1] * 255),\r\n        Math.round(colorCoordsDecimal[2] * 255),\r\n      ];\r\n    } else {\r\n      console.error(`unable to parse: ${color}`);\r\n    }\r\n\r\n    return array255;\r\n  }\r\n\r\n  createSrgbColor(color: string, lightness: number): string | null {\r\n    let srgbColor: string | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const originalChroma = oklchColor.coords[1];\r\n      const originalHue = oklchColor.coords[2];\r\n\r\n      const targetColor = new Color('oklch', [lightness, originalChroma, originalHue]);\r\n\r\n      // const inSrgbGamut = targetColor.inGamut('srgb');\r\n\r\n      // if (!inSrgbGamut) {\r\n      //   console.warn(\r\n      //     `OKLCH color in SRGB gamut: ${targetColor.inGamut('srgb')}`\r\n      //   );\r\n      // }\r\n\r\n      const tColorInSrgbGamut = targetColor.toGamut({\r\n        space: 'srgb',\r\n        method: 'oklch.c',\r\n      });\r\n\r\n      const targetColorAsRgbColor = tColorInSrgbGamut.to('srgb');\r\n\r\n      srgbColor = targetColorAsRgbColor.toString({ format: 'hex' });\r\n    }\r\n\r\n    return srgbColor;\r\n  }\r\n\r\n  isInSrgbGamut(oklchColorCoord: ColorCoordArray): Promise<boolean> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      try {\r\n        const colorObject = new Color('oklch', oklchColorCoord);\r\n        const variantInGamut = colorObject.inGamut('srgb');\r\n\r\n        resolve(variantInGamut);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  createVariants(color: string): Array<ColorCoordArray> | null {\r\n    let variantCollection: Array<ColorCoordArray> | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const lchCooords = oklchColor.coords;\r\n      const colorChroma = lchCooords[1];\r\n      const colorHue = lchCooords[2];\r\n\r\n      // 1) create enough steps of lightness\r\n      const lightnessSteps = 1000;\r\n      const lightMax = 1;\r\n      const lightMin = 0;\r\n      const lightInterval = (lightMax - lightMin) / lightnessSteps;\r\n\r\n      // 2) create all variants of color using constant chroma and hue.\r\n      variantCollection = [];\r\n\r\n      // 2a) this actually creates `lightnessSteps + 1` variants as initial variant has to start at zero.\r\n      for (let i = 0; i <= lightnessSteps; i++) {\r\n        const variantTargetLight = i * lightInterval;\r\n        const variant: ColorCoordArray = [variantTargetLight, colorChroma, colorHue];\r\n\r\n        variantCollection.push(variant);\r\n      }\r\n    } else {\r\n      console.error(`unable to parse color`);\r\n    }\r\n\r\n    return variantCollection;\r\n  }\r\n\r\n  filterOutOfGamutVariants(\r\n    variants: Array<ColorCoordArray> | null\r\n  ): Promise<Array<ColorCoordArray>> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!variants) {\r\n        reject(`no variants`);\r\n      } else {\r\n        let filteringComplete: boolean = false;\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < variants.length; i++) {\r\n          const curVariant = variants[i];\r\n\r\n          if (await this.isInSrgbGamut(curVariant)) {\r\n            filtered.push(curVariant);\r\n          }\r\n\r\n          if (i === variants.length - 1) filteringComplete = true;\r\n        }\r\n\r\n        if (filteringComplete) {\r\n          resolve(filtered);\r\n        } else {\r\n          reject(`error`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMinMaxLight(color: string): Promise<MinMaxLightObject | null> {\r\n    let returnedObject: MinMaxLightObject | null = null;\r\n\r\n    const initVariantCollection = this.createVariants(color);\r\n\r\n    const variantCollection = await this.filterOutOfGamutVariants(initVariantCollection);\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor && variantCollection.length) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      const lchCooords = oklchColor.coords;\r\n\r\n      const oklchLightCoordIndex = 0;\r\n      const firstArrayItemIndex = 0;\r\n      const lastArrayItemIndex = variantCollection.length - 1;\r\n\r\n      const minLight = variantCollection[firstArrayItemIndex][oklchLightCoordIndex];\r\n      const maxLight = variantCollection[lastArrayItemIndex][oklchLightCoordIndex];\r\n\r\n      returnedObject = {\r\n        originalCoords: lchCooords,\r\n        lightMin: minLight,\r\n        lightMax: maxLight,\r\n      };\r\n    } else {\r\n      if (!parsedColor) {\r\n        console.error(`unable to parse color`);\r\n      } else {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n        const lchCooords = oklchColor.coords;\r\n        returnedObject = {\r\n          originalCoords: lchCooords,\r\n          lightMin: lchCooords[0],\r\n          lightMax: lchCooords[0],\r\n        };\r\n      }\r\n    }\r\n\r\n    return returnedObject;\r\n  }\r\n\r\n  async getRandomColorPair(): Promise<ColorPair> {\r\n    let pair: ColorPair = ['black', 'white'];\r\n\r\n    // ref: oklch.com\r\n    // const targetChroma = 0.11;\r\n    const targetChroma = random(0.11, 0.34, true);\r\n\r\n    const colorOneLight = random(0.25, 0.26, true);\r\n    const colorOneHue = random(0, 360, true);\r\n    const colorTwoLight = random(0.94, 0.95, true);\r\n    const colorTwoHue = random(0, 360, true);\r\n\r\n    const colorOne = new Color('oklch', [colorOneLight, targetChroma, colorOneHue])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const colorTwo = new Color('oklch', [colorTwoLight, targetChroma, colorTwoHue])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const initPair: ColorPair = [colorOne, colorTwo];\r\n\r\n    const chromaMatchedPair = await this.matchChromas(initPair);\r\n\r\n    pair = chromaMatchedPair.colors ? chromaMatchedPair.colors : pair;\r\n\r\n    return pair;\r\n  }\r\n\r\n  // This function only adjust the first color of the pair.\r\n  async adjustColorPairForPresentation(pair: ColorPair): Promise<ColorPair> {\r\n    let returnedPair: ColorPair = ['black', 'white'];\r\n\r\n    const colorOne = pair[0];\r\n    const colortwo = pair[1];\r\n\r\n    const parsedColorOne = this.parseColor(colorOne);\r\n\r\n    const colorOneMinMaxLightObj = await this.getMinMaxLight(colorOne);\r\n\r\n    if (parsedColorOne && colorOneMinMaxLightObj) {\r\n      const colorOneTargetLightness =\r\n        colorOneMinMaxLightObj.lightMin +\r\n        (colorOneMinMaxLightObj.lightMax - colorOneMinMaxLightObj.lightMin) / 2;\r\n\r\n      const oklchColorOne = new Color('srgb', parsedColorOne.coords).to('oklch');\r\n\r\n      const adjColorOne = new Color('oklch', [\r\n        colorOneTargetLightness,\r\n        oklchColorOne.coords[1],\r\n        oklchColorOne.coords[2],\r\n      ])\r\n        .to('srgb')\r\n        .toString({ format: 'hex' });\r\n\r\n      returnedPair = [adjColorOne, colortwo];\r\n    } else {\r\n      console.warn('trouble adjusting colors');\r\n    }\r\n\r\n    return returnedPair;\r\n  }\r\n\r\n  async matchChromas(colorpair: ColorPair): Promise<ChromaMatchObject> {\r\n    let pair: ChromaMatchObject = new ChromaMatchObject();\r\n\r\n    const colorOneParsed = this.parseColor(colorpair[0]);\r\n    const colorTwoParsed = this.parseColor(colorpair[1]);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneOklch = new Color('srgb', colorOneParsed.coords).to('oklch');\r\n      const colorOneChroma = colorOneOklch.coords[1];\r\n\r\n      const colorTwoOklch = new Color('srgb', colorTwoParsed.coords).to('oklch');\r\n      const colorTwoChroma = colorTwoOklch.coords[1];\r\n\r\n      const colorOneCandCoords: ColorCoordArray = [\r\n        colorOneOklch.coords[0],\r\n        colorTwoChroma,\r\n        colorOneOklch.coords[2],\r\n      ];\r\n      const colorTwoCandCoords: ColorCoordArray = [\r\n        colorTwoOklch.coords[0],\r\n        colorOneChroma,\r\n        colorTwoOklch.coords[2],\r\n      ];\r\n\r\n      const colorOneCandInGamut = await this.isInSrgbGamut(colorOneCandCoords);\r\n      const colorTwoCandInGamut = await this.isInSrgbGamut(colorTwoCandCoords);\r\n\r\n      if (colorOneCandInGamut && !colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          new Color('oklch', colorOneCandCoords).to('srgb').toString({ format: 'hex' }),\r\n          colorpair[1],\r\n        ];\r\n\r\n        pair.chroma = colorOneCandCoords[1];\r\n      }\r\n\r\n      if (!colorOneCandInGamut && colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          colorpair[0],\r\n          new Color('oklch', colorTwoCandCoords).to('srgb').toString({ format: 'hex' }),\r\n        ];\r\n\r\n        pair.chroma = colorTwoCandCoords[1];\r\n      }\r\n\r\n      if (colorOneCandInGamut && colorTwoCandInGamut) {\r\n        if (colorOneCandCoords[1] > colorTwoCandCoords[1]) {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            new Color('oklch', colorOneCandCoords).to('srgb').toString({ format: 'hex' }),\r\n            colorpair[1],\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        } else {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            colorpair[0],\r\n            new Color('oklch', colorTwoCandCoords).to('srgb').toString({ format: 'hex' }),\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"color parsing didn't work out. \");\r\n    }\r\n\r\n    return pair;\r\n  }\r\n\r\n  calcDeltaE(colorOne: string, colorTwo: string): number | null {\r\n    let delta: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawDelta = colorOneObj.deltaE2000(colorTwoObj);\r\n\r\n      // const fixedDelta = rawDelta.toFixed(2);\r\n\r\n      // delta = parseFloat(fixedDelta);\r\n      delta = Math.round(rawDelta);\r\n    }\r\n\r\n    return delta;\r\n  }\r\n\r\n  calcWcag2(colorOne: string, colorTwo: string): number | null {\r\n    let wcag21: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawWcag21 = colorOneObj.contrast(colorTwoObj, 'WCAG21');\r\n\r\n      const fixedDelta = rawWcag21.toFixed(1);\r\n\r\n      wcag21 = parseFloat(fixedDelta);\r\n    }\r\n\r\n    return wcag21;\r\n  }\r\n\r\n  getColorMeta(color: string): ColorMetaObj | null {\r\n    let meta: ColorMetaObj | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const lchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      meta = {\r\n        lightness: lchColor.coords[0].toFixed(2),\r\n        chroma: lchColor.coords[1].toFixed(2),\r\n        hue: lchColor.coords[2].toFixed(2),\r\n        saturation: ((lchColor.coords[1] / lchColor.coords[0]) * 100).toFixed(2),\r\n      };\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getMinObjectDimension(apca: number): number {\r\n    let dimension: number = NaN;\r\n\r\n    const absApca = Math.abs(apca);\r\n\r\n    const pixels = [1, 1.5, 2, 3, 4, 6, 8, 10, 15];\r\n    const apcaScores = [90, 75, 60, 50, 45, 30, 25, 20, 15];\r\n    const minLookup = scaleLinear(pixels).domain(apcaScores);\r\n\r\n    const initSize = minLookup(absApca).toFixed(2);\r\n\r\n    dimension = parseFloat(initSize);\r\n\r\n    if (dimension > 15) {\r\n      dimension = 15;\r\n    }\r\n\r\n    if (absApca >= 100) {\r\n      dimension = 0.25;\r\n    }\r\n\r\n    if (absApca < 15) {\r\n      dimension = NaN;\r\n    }\r\n\r\n    return dimension;\r\n  }\r\n\r\n  generateAllOklchVariants(\r\n    color: string,\r\n    lightSteps: number,\r\n    chromaSteps: number\r\n  ): Promise<TableData> {\r\n    return new Promise((resolve, reject) => {\r\n      const parsedColor = this.parseColor(color);\r\n\r\n      const variantsCollection = [];\r\n\r\n      let sortedVariantsCollection = [];\r\n\r\n      if (parsedColor) {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n        const lchCooords = oklchColor.coords;\r\n        const colorLight = lchCooords[0];\r\n        const colorChroma = lchCooords[1];\r\n        const colorHue = lchCooords[2];\r\n\r\n        const lightMax = 1;\r\n        const lightMin = 0;\r\n        const lightInterval = (lightMax - lightMin) / lightSteps;\r\n\r\n        // calculate light levels\r\n        const rawLightLevels = [];\r\n\r\n        let lLevel = colorLight;\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel + lightInterval;\r\n        } while (lLevel <= lightMax);\r\n\r\n        lLevel = colorLight;\r\n\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel - lightInterval;\r\n        } while (lLevel >= lightMin);\r\n\r\n        const sortedLightLevels = sort(uniq(rawLightLevels));\r\n\r\n        const chromaMax = 0.33;\r\n        const chromaMin = 0;\r\n        const chromaInterval = (chromaMax - chromaMin) / chromaSteps;\r\n\r\n        // calculate chroma levels\r\n        const rawChromaLevels = [];\r\n\r\n        let cLevel = colorChroma;\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel + chromaInterval;\r\n        } while (cLevel <= chromaMax);\r\n\r\n        cLevel = colorChroma;\r\n\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel - chromaInterval;\r\n        } while (cLevel >= chromaMin);\r\n\r\n        const sortedChromaLevels = sort(uniq(rawChromaLevels));\r\n\r\n        // generate all rows\r\n        for (let i = 0; i < sortedLightLevels.length; i++) {\r\n          const variantRow: Array<TableColorCell> = [];\r\n\r\n          for (let j = 0; j < sortedChromaLevels.length; j++) {\r\n            const targetLightness = sortedLightLevels[i];\r\n\r\n            const targetChroma = sortedChromaLevels[j];\r\n\r\n            const variantColor = new Color('oklch', [targetLightness, targetChroma, colorHue]);\r\n\r\n            const variantColorinGamut = variantColor.inGamut('srgb');\r\n\r\n            const colorVal = variantColorinGamut\r\n              ? variantColor.to('srgb').toString({ format: 'hex' })\r\n              : '';\r\n\r\n            const deltaE = colorVal ? this.calcDeltaE(colorVal, color) : null;\r\n\r\n            const dLight = colorVal\r\n              ? Math.round(((targetLightness - colorLight) / colorLight) * 100)\r\n              : null;\r\n\r\n            const dChroma = colorVal\r\n              ? Math.round(((targetChroma - colorChroma) / colorChroma) * 100)\r\n              : null;\r\n\r\n            const variantObj: TableColorCell = {\r\n              color: colorVal,\r\n              lightness: targetLightness,\r\n              chroma: targetChroma,\r\n              hue: colorHue,\r\n              deltaE: !deltaE ? NaN : deltaE,\r\n              deltaChroma: !dChroma ? NaN : dChroma,\r\n              deltaLightness: !dLight ? NaN : dLight,\r\n            };\r\n\r\n            variantRow.push(variantObj);\r\n          }\r\n\r\n          variantsCollection.push(variantRow);\r\n        }\r\n      } else {\r\n        console.error(`could not parse color`);\r\n\r\n        reject(`could not parse color`);\r\n      }\r\n\r\n      // order color rows from light to dark\r\n      sortedVariantsCollection = reverse(variantsCollection);\r\n\r\n      resolve(sortedVariantsCollection);\r\n    });\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "chroma",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "colors",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorPair | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ContrastObject",
            "id": "class-ContrastObject-d690a789bc9169147a4979e2bd070f667d7d3ebeddbdc178ec08562b2ebb90e8f3efa4006e7d6b1d0e284a4525d8b68be73993d18c69dd97ca59d7b1639769ce",
            "file": "src/app/_components/color-contrast/color-contrast.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, effect, inject, input, signal } from '@angular/core';\r\nimport { ColorMetricsService, ContrastType } from '../../services/color-metrics.service';\r\nimport { ColorUtilService } from '../../services/color-util.service';\r\n\r\nexport class ContrastObject {\r\n  score: number = NaN;\r\n  type: ContrastType | null = null;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-color-contrast',\r\n  templateUrl: './color-contrast.component.html',\r\n  styleUrls: ['./color-contrast.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class ColorContrastComponent {\r\n  cus = inject(ColorUtilService);\r\n  cms = inject(ColorMetricsService);\r\n\r\n  colorOne = input<string>('');\r\n  colorTwo = input<string>('');\r\n  contrastType = input<ContrastType | 'apca object'>('apca');\r\n  debug = input<boolean>(false);\r\n\r\n  contrastScore = signal<number>(NaN);\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const colorOne = this.colorOne();\r\n      const colorTwo = this.colorTwo();\r\n      const contrastType = this.contrastType();\r\n      const debug = this.debug();\r\n\r\n      if (!colorOne || !colorTwo || !contrastType) {\r\n        if (debug) {\r\n          console.warn('contrast comp missing inputs');\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      const isApcaLike = contrastType.search('apca') > -1 ? true : false;\r\n\r\n      const score = this.cms.getContrast(colorOne, colorTwo, isApcaLike ? 'apca' : 'bpca');\r\n\r\n      if (score && contrastType === 'apca object') {\r\n        this.contrastScore.set(this.cus.getMinObjectDimension(score));\r\n\r\n        return;\r\n      }\r\n\r\n      this.contrastScore.set(!score ? NaN : score);\r\n    });\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "score",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContrastType | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CopyToClipboardEvent",
            "id": "class-CopyToClipboardEvent-1b8f0a48b6b32734d574345a5e8cfdc6e76f876a93bb2eb5c77ff7c9f579bdf1318ff29ff69dc496a8da5532f3e5b14e79d35508ef1c23e9cfa6edea60f78b47",
            "file": "src/app/_components/copy-to-clipboard-button/copy-to-clipboard-button.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Output, EventEmitter, input, output } from '@angular/core';\r\n\r\nexport class CopyToClipboardEvent {\r\n  copied: boolean = false;\r\n  color: string = '';\r\n}\r\n\r\n@Component({\r\n  selector: 'app-copy-to-clipboard-button',\r\n  templateUrl: './copy-to-clipboard-button.component.html',\r\n  styleUrls: ['./copy-to-clipboard-button.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class CopyToClipboardButtonComponent {\r\n  color = input<string>('');\r\n  debug = input<boolean>(true);\r\n\r\n  copyEvent = output<CopyToClipboardEvent>();\r\n\r\n  async copyToClipboard(): Promise<void> {\r\n    const color = this.color();\r\n\r\n    if (!color) {\r\n      if (this.debug()) {\r\n        console.warn('no color provided to copy');\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const colorSansHex = color.replace('#', '');\r\n\r\n    try {\r\n      await navigator.clipboard.writeText(colorSansHex);\r\n\r\n      this.copyEvent.emit({\r\n        copied: true,\r\n        color: colorSansHex,\r\n      });\r\n\r\n      if (this.debug()) {\r\n        console.log(color, 'copied to clipboard');\r\n      }\r\n    } catch (err) {\r\n      this.copyEvent.emit({\r\n        copied: false,\r\n        color: colorSansHex,\r\n      });\r\n\r\n      console.error('Failed to copy text: ', err);\r\n    }\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "copied",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DifferencesDataObj",
            "id": "class-DifferencesDataObj-3889e5a50165df2e8062d1e3b7b565480e69be76f15ffde16aed2030f3092c772ed38fddb0dd43230633b15661d4bae4644711d29877262bc9969e4cc1f5b579",
            "file": "src/app/_components/metadata/metadata.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, effect, inject, input, signal, computed } from '@angular/core';\r\nimport { ColorUtilService, ColorMetaObj } from '../../services/color-util.service';\r\nimport { ColorMetricsService } from '../../services/color-metrics.service';\r\n\r\nexport class DifferencesDataObj {\r\n  deltaE: number = NaN;\r\n  wcag2Old: number = NaN;\r\n  wcag2New: number = NaN;\r\n  apca: number = NaN;\r\n}\r\nexport class SuccessesObj {\r\n  text: 'pass' | 'fail' | null = null;\r\n  largeText: 'pass' | 'fail' | null = null;\r\n  objectMinDimension: number | string = NaN;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class MetadataComponent {\r\n  colorOne = input<string>('');\r\n  colorTwo = input<string>('');\r\n  debug = input<boolean>(false);\r\n\r\n  private readonly cus = inject(ColorUtilService);\r\n  private readonly cms = inject(ColorMetricsService);\r\n\r\n  readonly colorOneMeta = computed<ColorMetaObj | null>(() => {\r\n    const colOne = this.colorOne();\r\n    if (!colOne) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get colorOne meta');\r\n      }\r\n      return null;\r\n    }\r\n    return this.cus.getColorMeta(colOne) ?? null;\r\n  });\r\n\r\n  readonly colorTwoMeta = computed<ColorMetaObj | null>(() => {\r\n    const colTwo = this.colorTwo();\r\n    if (!colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get colorTwo meta');\r\n      }\r\n      return null;\r\n    }\r\n    return this.cus.getColorMeta(colTwo) ?? null;\r\n  });\r\n\r\n  readonly differences = computed<DifferencesDataObj>(() => {\r\n    const colOne = this.colorOne();\r\n    const colTwo = this.colorTwo();\r\n    const result = new DifferencesDataObj();\r\n    if (!colOne || !colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get color differences');\r\n      }\r\n      return result;\r\n    }\r\n    const deltaE = this.cus.calcDeltaE(colOne, colTwo);\r\n    const wcag2New = this.cms.getContrast(colOne, colTwo, 'bpca');\r\n    const wcag2Old = this.cus.calcWcag2(colOne, colTwo);\r\n    const apca = this.cms.getContrast(colOne, colTwo, 'apca');\r\n    result.deltaE = !deltaE ? NaN : deltaE;\r\n    result.wcag2New = !wcag2New ? NaN : wcag2New;\r\n    result.wcag2Old = !wcag2Old ? NaN : wcag2Old;\r\n    result.apca = !apca ? NaN : apca;\r\n    return result;\r\n  });\r\n\r\n  readonly successes = computed<SuccessesObj>(() => {\r\n    const colOne = this.colorOne();\r\n    const colTwo = this.colorTwo();\r\n    const result: SuccessesObj = {\r\n      text: null,\r\n      largeText: null,\r\n      objectMinDimension: NaN,\r\n    };\r\n    if (!colOne || !colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('no colors for successes');\r\n      }\r\n      return result;\r\n    }\r\n    const wcagNew = this.cms.getContrast(colOne, colTwo, 'bpca');\r\n    const apcaScore = this.cms.getContrast(colOne, colTwo, 'apca');\r\n    if (!wcagNew || !apcaScore) {\r\n      if (this.debug()) {\r\n        console.warn('trouble getting scores');\r\n      }\r\n      return result;\r\n    }\r\n    if (wcagNew < 0 || Math.abs(apcaScore) < 0) {\r\n      if (this.debug()) {\r\n        console.warn('something wonky with calculating scores');\r\n      }\r\n      return result;\r\n    }\r\n    result.text = wcagNew >= 4.5 ? 'pass' : 'fail';\r\n    result.largeText = wcagNew >= 3 ? 'pass' : 'fail';\r\n    const minDimension = this.cus.getMinObjectDimension(apcaScore);\r\n    result.objectMinDimension = Number.isNaN(minDimension) ? 'invisible' : minDimension;\r\n    return result;\r\n  });\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "apca",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "deltaE",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "wcag2New",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "wcag2Old",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SuccessesObj",
            "id": "class-SuccessesObj-3889e5a50165df2e8062d1e3b7b565480e69be76f15ffde16aed2030f3092c772ed38fddb0dd43230633b15661d4bae4644711d29877262bc9969e4cc1f5b579",
            "file": "src/app/_components/metadata/metadata.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, effect, inject, input, signal, computed } from '@angular/core';\r\nimport { ColorUtilService, ColorMetaObj } from '../../services/color-util.service';\r\nimport { ColorMetricsService } from '../../services/color-metrics.service';\r\n\r\nexport class DifferencesDataObj {\r\n  deltaE: number = NaN;\r\n  wcag2Old: number = NaN;\r\n  wcag2New: number = NaN;\r\n  apca: number = NaN;\r\n}\r\nexport class SuccessesObj {\r\n  text: 'pass' | 'fail' | null = null;\r\n  largeText: 'pass' | 'fail' | null = null;\r\n  objectMinDimension: number | string = NaN;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class MetadataComponent {\r\n  colorOne = input<string>('');\r\n  colorTwo = input<string>('');\r\n  debug = input<boolean>(false);\r\n\r\n  private readonly cus = inject(ColorUtilService);\r\n  private readonly cms = inject(ColorMetricsService);\r\n\r\n  readonly colorOneMeta = computed<ColorMetaObj | null>(() => {\r\n    const colOne = this.colorOne();\r\n    if (!colOne) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get colorOne meta');\r\n      }\r\n      return null;\r\n    }\r\n    return this.cus.getColorMeta(colOne) ?? null;\r\n  });\r\n\r\n  readonly colorTwoMeta = computed<ColorMetaObj | null>(() => {\r\n    const colTwo = this.colorTwo();\r\n    if (!colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get colorTwo meta');\r\n      }\r\n      return null;\r\n    }\r\n    return this.cus.getColorMeta(colTwo) ?? null;\r\n  });\r\n\r\n  readonly differences = computed<DifferencesDataObj>(() => {\r\n    const colOne = this.colorOne();\r\n    const colTwo = this.colorTwo();\r\n    const result = new DifferencesDataObj();\r\n    if (!colOne || !colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get color differences');\r\n      }\r\n      return result;\r\n    }\r\n    const deltaE = this.cus.calcDeltaE(colOne, colTwo);\r\n    const wcag2New = this.cms.getContrast(colOne, colTwo, 'bpca');\r\n    const wcag2Old = this.cus.calcWcag2(colOne, colTwo);\r\n    const apca = this.cms.getContrast(colOne, colTwo, 'apca');\r\n    result.deltaE = !deltaE ? NaN : deltaE;\r\n    result.wcag2New = !wcag2New ? NaN : wcag2New;\r\n    result.wcag2Old = !wcag2Old ? NaN : wcag2Old;\r\n    result.apca = !apca ? NaN : apca;\r\n    return result;\r\n  });\r\n\r\n  readonly successes = computed<SuccessesObj>(() => {\r\n    const colOne = this.colorOne();\r\n    const colTwo = this.colorTwo();\r\n    const result: SuccessesObj = {\r\n      text: null,\r\n      largeText: null,\r\n      objectMinDimension: NaN,\r\n    };\r\n    if (!colOne || !colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('no colors for successes');\r\n      }\r\n      return result;\r\n    }\r\n    const wcagNew = this.cms.getContrast(colOne, colTwo, 'bpca');\r\n    const apcaScore = this.cms.getContrast(colOne, colTwo, 'apca');\r\n    if (!wcagNew || !apcaScore) {\r\n      if (this.debug()) {\r\n        console.warn('trouble getting scores');\r\n      }\r\n      return result;\r\n    }\r\n    if (wcagNew < 0 || Math.abs(apcaScore) < 0) {\r\n      if (this.debug()) {\r\n        console.warn('something wonky with calculating scores');\r\n      }\r\n      return result;\r\n    }\r\n    result.text = wcagNew >= 4.5 ? 'pass' : 'fail';\r\n    result.largeText = wcagNew >= 3 ? 'pass' : 'fail';\r\n    const minDimension = this.cus.getMinObjectDimension(apcaScore);\r\n    result.objectMinDimension = Number.isNaN(minDimension) ? 'invisible' : minDimension;\r\n    return result;\r\n  });\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "largeText",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"pass\" | \"fail\" | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "objectMinDimension",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "text",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"pass\" | \"fail\" | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableColorCell",
            "id": "class-TableColorCell-7328d72a5e3a1f614fb03d666b5296e76edf92b4173eae715740d9e877d196ca2440c5967afb9dcc821e9a45eb09ba786e435b9c53ae25681d9ad74a0dbc041c",
            "file": "src/app/_components/palette-table/palette-table.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  inject,\r\n  input,\r\n  signal,\r\n  computed,\r\n  effect,\r\n} from '@angular/core';\r\nimport { ColorUtilService } from '../../services/color-util.service';\r\n\r\nexport class TableColorCell {\r\n  color: string = '';\r\n  lightness: number = NaN;\r\n  chroma: number = NaN;\r\n  hue: number = NaN;\r\n  deltaE: number = NaN;\r\n  deltaLightness: number = NaN;\r\n  deltaChroma: number = NaN;\r\n}\r\n\r\nexport type TableRow = Array<TableColorCell>;\r\n\r\nexport type TableData = Array<TableRow>;\r\n\r\n@Component({\r\n  selector: 'app-palette-table',\r\n  templateUrl: './palette-table.component.html',\r\n  styleUrls: ['./palette-table.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class PaletteTableComponent {\r\n  color = input<string>('');\r\n  debug = input<boolean>(false);\r\n\r\n  @Output() selectedColor = new EventEmitter<TableColorCell>();\r\n\r\n  readonly cus = inject(ColorUtilService);\r\n\r\n  readonly lightSteps = 5;\r\n  readonly chromaSteps = 14;\r\n\r\n  // Signals for table data and headers\r\n  readonly dataStruct = signal<TableData>([]);\r\n  readonly tableHeaders = computed<number[]>(() => {\r\n    const data = this.dataStruct();\r\n    if (!data.length || !data[0].length) return [];\r\n    return data[0].map((cell) => cell.chroma);\r\n  });\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const color = this.color();\r\n      this.getTableData(color);\r\n    });\r\n  }\r\n\r\n  selectColor(rowNum: number, columnNum: number) {\r\n    const data = this.dataStruct();\r\n    const targetColor = data[rowNum][columnNum];\r\n    this.selectedColor.emit(targetColor);\r\n  }\r\n\r\n  getTextColor(bkgdColor: string) {\r\n    return (this.cus.calcWcag2('white', bkgdColor) as number) >= 7 ? 'white' : 'black';\r\n  }\r\n\r\n  async getTableData(color: string) {\r\n    if (!color) {\r\n      if (this.debug()) {\r\n        console.warn(`no color for palette table`);\r\n      }\r\n      this.dataStruct.set([]);\r\n      return;\r\n    }\r\n    const data = await this.cus.generateAllOklchVariants(color, this.lightSteps, this.chromaSteps);\r\n    this.dataStruct.set(data);\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "chroma",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "deltaChroma",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "deltaE",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "deltaLightness",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "hue",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "lightness",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-cb844c208e5c35bbf9a938ca36cb9934d1d3476d8102c0e4d76d9a3dbc09e0488e63303244023084d133ced8680d03d48ec98d722cb07a01911188cbfd9fb2f1",
            "file": "src/app/_components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alertMessage",
                    "defaultValue": "new AlertMessagObj()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertMessagObj",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "alertClosed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "showAlert",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "timeout",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "uniqId",
                    "defaultValue": "signal<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "generateRandomString",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, input, effect, Output, signal, output } from '@angular/core';\r\nimport { random, set, times } from 'lodash-es';\r\n\r\nexport class AlertMessagObj {\r\n  message: string = '';\r\n}\r\n\r\n@Component({\r\n  selector: 'app-alert',\r\n  templateUrl: './alert.component.html',\r\n  styleUrls: ['./alert.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class AlertComponent {\r\n  alertMessage = input<AlertMessagObj>(new AlertMessagObj());\r\n\r\n  alertClosed = output<boolean>();\r\n\r\n  showAlert = signal<boolean>(false);\r\n  uniqId = signal<string>('');\r\n\r\n  timeout: number = NaN;\r\n\r\n  generateRandomString(length: number) {\r\n    return times(length, () => random(35).toString(36)).join('');\r\n  }\r\n\r\n  hideAlert() {\r\n    this.showAlert.set(false);\r\n\r\n    this.uniqId.set('');\r\n\r\n    this.alertClosed.emit(true);\r\n  }\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const alertMessage = this.alertMessage();\r\n\r\n      if (alertMessage.message) {\r\n        this.uniqId.set(this.generateRandomString(12));\r\n\r\n        this.showAlert.set(true);\r\n\r\n        if (this.timeout) {\r\n          clearTimeout(this.timeout);\r\n        }\r\n\r\n        this.timeout = setTimeout(() => {\r\n          this.showAlert.set(false);\r\n        }, 5000) as unknown as number;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  .alert-content {\r\n    box-shadow: 0 0 4px 0 black;\r\n    border-bottom: transparent;\r\n    border-radius: 5px 5px 0 0;\r\n    background-color: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 0.3rem;\r\n    gap: 0.3rem;\r\n    opacity: 1;\r\n    transform: scale(1);\r\n    animation-name: show-alert;\r\n    animation-duration: 200ms;\r\n\r\n    p {\r\n      margin: 0;\r\n      text-align: center;\r\n    }\r\n\r\n    button {\r\n      font-family: var(--body-font);\r\n      min-height: var(--min-hit-dimension-aaa);\r\n      min-width: var(--min-hit-dimension-aaa);\r\n      border: transparent 2px solid;\r\n      border-radius: 5px;\r\n      background-color: white;\r\n\r\n      &:hover {\r\n        background-color: #dfdfdf;\r\n      }\r\n    }\r\n\r\n    .msg-id {\r\n      color: #717171;\r\n      font-size: var(--min-text-size);\r\n    }\r\n\r\n    &:empty {\r\n      display: none;\r\n      opacity: 0;\r\n      transform: translateY(100%);\r\n    }\r\n  }\r\n\r\n  @keyframes show-alert {\r\n    from {\r\n      display: none;\r\n      opacity: 0;\r\n      transform: translateY(100%);\r\n    }\r\n\r\n    to {\r\n      display: flex;\r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34
            },
            "extends": [],
            "templateData": "<div class=\"comp-container\" role=\"alert\">\r\n  <div class=\"alert-content\">\r\n    @if (showAlert()) {\r\n      <p [innerText]=\"alertMessage().message\"></p>\r\n      <p class=\"msg-id\">Message ID: {{ uniqId() }}</p>\r\n    }\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "App",
            "id": "component-App-4d061134eb9ba05c776f338134a4f9215f1bfc19f0e1413885709e1533a9082fc32e665fa5c8f2041462fa76f189433168dee4949cbb219b76296be80220ea10",
            "file": "src/app/app.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "signal('cqpi-ng-20-holding')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.html',\r\n  styleUrl: './app.scss'\r\n})\r\nexport class App {\r\n  protected readonly title = signal('cqpi-ng-20-holding');\r\n}\r\n",
            "styleUrl": "./app.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->\r\n<!-- * * * * * * * to get started with your project! * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n\r\n<style>\r\n  :host {\r\n    --bright-blue: oklch(51.01% 0.274 263.83);\r\n    --electric-violet: oklch(53.18% 0.28 296.97);\r\n    --french-violet: oklch(47.66% 0.246 305.88);\r\n    --vivid-pink: oklch(69.02% 0.277 332.77);\r\n    --hot-red: oklch(61.42% 0.238 15.34);\r\n    --orange-red: oklch(63.32% 0.24 31.68);\r\n\r\n    --gray-900: oklch(19.37% 0.006 300.98);\r\n    --gray-700: oklch(36.98% 0.014 302.71);\r\n    --gray-400: oklch(70.9% 0.015 304.04);\r\n\r\n    --red-to-pink-to-purple-vertical-gradient: linear-gradient(\r\n      180deg,\r\n      var(--orange-red) 0%,\r\n      var(--vivid-pink) 50%,\r\n      var(--electric-violet) 100%\r\n    );\r\n\r\n    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(\r\n      90deg,\r\n      var(--orange-red) 0%,\r\n      var(--vivid-pink) 50%,\r\n      var(--electric-violet) 100%\r\n    );\r\n\r\n    --pill-accent: var(--bright-blue);\r\n\r\n    font-family: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\r\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\r\n      \"Segoe UI Symbol\";\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 3.125rem;\r\n    color: var(--gray-900);\r\n    font-weight: 500;\r\n    line-height: 100%;\r\n    letter-spacing: -0.125rem;\r\n    margin: 0;\r\n    font-family: \"Inter Tight\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\r\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\r\n      \"Segoe UI Symbol\";\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n    color: var(--gray-700);\r\n  }\r\n\r\n  main {\r\n    width: 100%;\r\n    min-height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 1rem;\r\n    box-sizing: inherit;\r\n    position: relative;\r\n  }\r\n\r\n  .angular-logo {\r\n    max-width: 9.2rem;\r\n  }\r\n\r\n  .content {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    max-width: 700px;\r\n    margin-bottom: 3rem;\r\n  }\r\n\r\n  .content h1 {\r\n    margin-top: 1.75rem;\r\n  }\r\n\r\n  .content p {\r\n    margin-top: 1.5rem;\r\n  }\r\n\r\n  .divider {\r\n    width: 1px;\r\n    background: var(--red-to-pink-to-purple-vertical-gradient);\r\n    margin-inline: 0.5rem;\r\n  }\r\n\r\n  .pill-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: start;\r\n    flex-wrap: wrap;\r\n    gap: 1.25rem;\r\n  }\r\n\r\n  .pill {\r\n    display: flex;\r\n    align-items: center;\r\n    --pill-accent: var(--bright-blue);\r\n    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);\r\n    color: var(--pill-accent);\r\n    padding-inline: 0.75rem;\r\n    padding-block: 0.375rem;\r\n    border-radius: 2.75rem;\r\n    border: 0;\r\n    transition: background 0.3s ease;\r\n    font-family: var(--inter-font);\r\n    font-size: 0.875rem;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    line-height: 1.4rem;\r\n    letter-spacing: -0.00875rem;\r\n    text-decoration: none;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  .pill:hover {\r\n    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);\r\n  }\r\n\r\n  .pill-group .pill:nth-child(6n + 1) {\r\n    --pill-accent: var(--bright-blue);\r\n  }\r\n  .pill-group .pill:nth-child(6n + 2) {\r\n    --pill-accent: var(--electric-violet);\r\n  }\r\n  .pill-group .pill:nth-child(6n + 3) {\r\n    --pill-accent: var(--french-violet);\r\n  }\r\n\r\n  .pill-group .pill:nth-child(6n + 4),\r\n  .pill-group .pill:nth-child(6n + 5),\r\n  .pill-group .pill:nth-child(6n + 6) {\r\n    --pill-accent: var(--hot-red);\r\n  }\r\n\r\n  .pill-group svg {\r\n    margin-inline-start: 0.25rem;\r\n  }\r\n\r\n  .social-links {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.73rem;\r\n    margin-top: 1.5rem;\r\n  }\r\n\r\n  .social-links path {\r\n    transition: fill 0.3s ease;\r\n    fill: var(--gray-400);\r\n  }\r\n\r\n  .social-links a:hover svg path {\r\n    fill: var(--gray-900);\r\n  }\r\n\r\n  @media screen and (max-width: 650px) {\r\n    .content {\r\n      flex-direction: column;\r\n      width: max-content;\r\n    }\r\n\r\n    .divider {\r\n      height: 1px;\r\n      width: 100%;\r\n      background: var(--red-to-pink-to-purple-horizontal-gradient);\r\n      margin-block: 1.5rem;\r\n    }\r\n  }\r\n</style>\r\n\r\n<main class=\"main\">\r\n  <div class=\"content\">\r\n    <div class=\"left-side\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 982 239\"\r\n        fill=\"none\"\r\n        class=\"angular-logo\"\r\n      >\r\n        <g clip-path=\"url(#a)\">\r\n          <path\r\n            fill=\"url(#b)\"\r\n            d=\"M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z\"\r\n          />\r\n          <path\r\n            fill=\"url(#c)\"\r\n            d=\"M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z\"\r\n          />\r\n        </g>\r\n        <defs>\r\n          <radialGradient\r\n            id=\"c\"\r\n            cx=\"0\"\r\n            cy=\"0\"\r\n            r=\"1\"\r\n            gradientTransform=\"rotate(118.122 171.182 60.81) scale(205.794)\"\r\n            gradientUnits=\"userSpaceOnUse\"\r\n          >\r\n            <stop stop-color=\"#FF41F8\" />\r\n            <stop offset=\".707\" stop-color=\"#FF41F8\" stop-opacity=\".5\" />\r\n            <stop offset=\"1\" stop-color=\"#FF41F8\" stop-opacity=\"0\" />\r\n          </radialGradient>\r\n          <linearGradient\r\n            id=\"b\"\r\n            x1=\"0\"\r\n            x2=\"982\"\r\n            y1=\"192\"\r\n            y2=\"192\"\r\n            gradientUnits=\"userSpaceOnUse\"\r\n          >\r\n            <stop stop-color=\"#F0060B\" />\r\n            <stop offset=\"0\" stop-color=\"#F0070C\" />\r\n            <stop offset=\".526\" stop-color=\"#CC26D5\" />\r\n            <stop offset=\"1\" stop-color=\"#7702FF\" />\r\n          </linearGradient>\r\n          <clipPath id=\"a\"><path fill=\"#fff\" d=\"M0 0h982v239H0z\" /></clipPath>\r\n        </defs>\r\n      </svg>\r\n      <h1>Hello, {{ title() }}</h1>\r\n      <p>Congratulations! Your app is running. 🎉</p>\r\n    </div>\r\n    <div class=\"divider\" role=\"separator\" aria-label=\"Divider\"></div>\r\n    <div class=\"right-side\">\r\n      <div class=\"pill-group\">\r\n        @for (item of [\r\n          { title: 'Explore the Docs', link: 'https://angular.dev' },\r\n          { title: 'Learn with Tutorials', link: 'https://angular.dev/tutorials' },\r\n          { title: 'Prompt and best practices for AI', link: 'https://angular.dev/ai/develop-with-ai'},\r\n          { title: 'CLI Docs', link: 'https://angular.dev/tools/cli' },\r\n          { title: 'Angular Language Service', link: 'https://angular.dev/tools/language-service' },\r\n          { title: 'Angular DevTools', link: 'https://angular.dev/tools/devtools' },\r\n        ]; track item.title) {\r\n          <a\r\n            class=\"pill\"\r\n            [href]=\"item.link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener\"\r\n          >\r\n            <span>{{ item.title }}</span>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              height=\"14\"\r\n              viewBox=\"0 -960 960 960\"\r\n              width=\"14\"\r\n              fill=\"currentColor\"\r\n            >\r\n              <path\r\n                d=\"M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h560v-280h80v280q0 33-23.5 56.5T760-120H200Zm188-212-56-56 372-372H560v-80h280v280h-80v-144L388-332Z\"\r\n              />\r\n            </svg>\r\n          </a>\r\n        }\r\n      </div>\r\n      <div class=\"social-links\">\r\n        <a\r\n          href=\"https://github.com/angular/angular\"\r\n          aria-label=\"Github\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n        >\r\n          <svg\r\n            width=\"25\"\r\n            height=\"24\"\r\n            viewBox=\"0 0 25 24\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            alt=\"Github\"\r\n          >\r\n            <path\r\n              d=\"M12.3047 0C5.50634 0 0 5.50942 0 12.3047C0 17.7423 3.52529 22.3535 8.41332 23.9787C9.02856 24.0946 9.25414 23.7142 9.25414 23.3871C9.25414 23.0949 9.24389 22.3207 9.23876 21.2953C5.81601 22.0377 5.09414 19.6444 5.09414 19.6444C4.53427 18.2243 3.72524 17.8449 3.72524 17.8449C2.61064 17.082 3.81137 17.0973 3.81137 17.0973C5.04697 17.1835 5.69604 18.3647 5.69604 18.3647C6.79321 20.2463 8.57636 19.7029 9.27978 19.3881C9.39052 18.5924 9.70736 18.0499 10.0591 17.7423C7.32641 17.4347 4.45429 16.3765 4.45429 11.6618C4.45429 10.3185 4.9311 9.22133 5.72065 8.36C5.58222 8.04931 5.16694 6.79833 5.82831 5.10337C5.82831 5.10337 6.85883 4.77319 9.2121 6.36459C10.1965 6.09082 11.2424 5.95546 12.2883 5.94931C13.3342 5.95546 14.3801 6.09082 15.3644 6.36459C17.7023 4.77319 18.7328 5.10337 18.7328 5.10337C19.3942 6.79833 18.9789 8.04931 18.8559 8.36C19.6403 9.22133 20.1171 10.3185 20.1171 11.6618C20.1171 16.3888 17.2409 17.4296 14.5031 17.7321C14.9338 18.1012 15.3337 18.8559 15.3337 20.0084C15.3337 21.6552 15.3183 22.978 15.3183 23.3779C15.3183 23.7009 15.5336 24.0854 16.1642 23.9623C21.0871 22.3484 24.6094 17.7341 24.6094 12.3047C24.6094 5.50942 19.0999 0 12.3047 0Z\"\r\n            />\r\n          </svg>\r\n        </a>\r\n        <a\r\n          href=\"https://twitter.com/angular\"\r\n          aria-label=\"Twitter\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n        >\r\n          <svg\r\n            width=\"24\"\r\n            height=\"24\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            alt=\"Twitter\"\r\n          >\r\n            <path\r\n              d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\"\r\n            />\r\n          </svg>\r\n        </a>\r\n        <a\r\n          href=\"https://www.youtube.com/channel/UCbn1OgGei-DV7aSRo_HaAiw\"\r\n          aria-label=\"Youtube\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n        >\r\n          <svg\r\n            width=\"29\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 29 20\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            alt=\"Youtube\"\r\n          >\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              clip-rule=\"evenodd\"\r\n              d=\"M27.4896 1.52422C27.9301 1.96749 28.2463 2.51866 28.4068 3.12258C29.0004 5.35161 29.0004 10 29.0004 10C29.0004 10 29.0004 14.6484 28.4068 16.8774C28.2463 17.4813 27.9301 18.0325 27.4896 18.4758C27.0492 18.9191 26.5 19.2389 25.8972 19.4032C23.6778 20 14.8068 20 14.8068 20C14.8068 20 5.93586 20 3.71651 19.4032C3.11363 19.2389 2.56449 18.9191 2.12405 18.4758C1.68361 18.0325 1.36732 17.4813 1.20683 16.8774C0.613281 14.6484 0.613281 10 0.613281 10C0.613281 10 0.613281 5.35161 1.20683 3.12258C1.36732 2.51866 1.68361 1.96749 2.12405 1.52422C2.56449 1.08095 3.11363 0.76113 3.71651 0.596774C5.93586 0 14.8068 0 14.8068 0C14.8068 0 23.6778 0 25.8972 0.596774C26.5 0.76113 27.0492 1.08095 27.4896 1.52422ZM19.3229 10L11.9036 5.77905V14.221L19.3229 10Z\"\r\n            />\r\n          </svg>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</main>\r\n\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n\r\n\r\n<router-outlet />\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-5747b2121bdc472b32e41e4e47db44dbd7601fe73e9c7b3d0f82e7d1aaf97be0d13d4880fee19b0e4d511178aa52a24a5a9ea3ee0034d204ffd659c0aae43e41",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 793,
                            "end": 807,
                            "kind": 328,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 794,
                                "end": 802,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <button\r\n  type=\"button\"\r\n  (click)=\"onClick.emit($event)\"\r\n  [ngClass]=\"classes\"\r\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n>\r\n  {{ label }}\r\n</button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport class ButtonComponent {\r\n  /** Is this the principal call to action on the page? */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /** What background color to use */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /** How large should the button be? */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /** Optional click handler */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n.storybook-button--primary {\r\n  background-color: #555ab9;\r\n  color: white;\r\n}\r\n.storybook-button--secondary {\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n  background-color: transparent;\r\n  color: #333;\r\n}\r\n.storybook-button--small {\r\n  padding: 10px 16px;\r\n  font-size: 12px;\r\n}\r\n.storybook-button--medium {\r\n  padding: 11px 20px;\r\n  font-size: 14px;\r\n}\r\n.storybook-button--large {\r\n  padding: 12px 24px;\r\n  font-size: 16px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ColorContrastComponent",
            "id": "component-ColorContrastComponent-d690a789bc9169147a4979e2bd070f667d7d3ebeddbdc178ec08562b2ebb90e8f3efa4006e7d6b1d0e284a4525d8b68be73993d18c69dd97ca59d7b1639769ce",
            "file": "src/app/_components/color-contrast/color-contrast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-contrast",
            "styleUrls": [
                "./color-contrast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-contrast.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colorOne",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "required": false
                },
                {
                    "name": "colorTwo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "required": false
                },
                {
                    "name": "contrastType",
                    "defaultValue": "'apca'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContrastType | 'apca object'",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "required": false
                },
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cms",
                    "defaultValue": "inject(ColorMetricsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "contrastScore",
                    "defaultValue": "signal<number>(NaN)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, effect, inject, input, signal } from '@angular/core';\r\nimport { ColorMetricsService, ContrastType } from '../../services/color-metrics.service';\r\nimport { ColorUtilService } from '../../services/color-util.service';\r\n\r\nexport class ContrastObject {\r\n  score: number = NaN;\r\n  type: ContrastType | null = null;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-color-contrast',\r\n  templateUrl: './color-contrast.component.html',\r\n  styleUrls: ['./color-contrast.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class ColorContrastComponent {\r\n  cus = inject(ColorUtilService);\r\n  cms = inject(ColorMetricsService);\r\n\r\n  colorOne = input<string>('');\r\n  colorTwo = input<string>('');\r\n  contrastType = input<ContrastType | 'apca object'>('apca');\r\n  debug = input<boolean>(false);\r\n\r\n  contrastScore = signal<number>(NaN);\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const colorOne = this.colorOne();\r\n      const colorTwo = this.colorTwo();\r\n      const contrastType = this.contrastType();\r\n      const debug = this.debug();\r\n\r\n      if (!colorOne || !colorTwo || !contrastType) {\r\n        if (debug) {\r\n          console.warn('contrast comp missing inputs');\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      const isApcaLike = contrastType.search('apca') > -1 ? true : false;\r\n\r\n      const score = this.cms.getContrast(colorOne, colorTwo, isApcaLike ? 'apca' : 'bpca');\r\n\r\n      if (score && contrastType === 'apca object') {\r\n        this.contrastScore.set(this.cus.getMinObjectDimension(score));\r\n\r\n        return;\r\n      }\r\n\r\n      this.contrastScore.set(!score ? NaN : score);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  padding: 0.5em 0.25ch;\r\n  border: var(--min-body-text-black) solid 3px;\r\n\r\n  .score-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    .score {\r\n      color: var(--ideal-body-text-black);\r\n      font-weight: 600;\r\n      font-family: var(--mono-font);\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-contrast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "extends": [],
            "templateData": "<!-- This comp is for users with typical vision. The same information is delivered with better UX for a user who is blind in the Color Metadata section. -->\r\n<div class=\"comp-container\" aria-hidden=\"true\">\r\n  <div class=\"score-container\">\r\n    <label class=\"sr-only\" for=\"contrast-score\"\r\n      >Contrast Score for Selected Colors</label\r\n    >\r\n\r\n    <div id=\"contrast-score\" class=\"score\">\r\n      {{ contrastScore() ? contrastScore() : \"!\" }}\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ColorPickerComponent",
            "id": "component-ColorPickerComponent-b6920869a71c69482a776ac219e08ded77208cf7aa9a2040df8fc6e6f914d05c320ec59287871de02f52c85bc26b9c2adc934ffd13799ef1e7c5d0131d6cfcb6",
            "file": "src/app/_components/color-picker/color-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-picker",
            "styleUrls": [
                "./color-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "required": false
                },
                {
                    "name": "comparedColor",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "required": false
                },
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "required": false
                },
                {
                    "name": "inputId",
                    "defaultValue": "'fg-color'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "required": false
                },
                {
                    "name": "inputName",
                    "defaultValue": "'foreground color'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "comparedColor",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "required": false
                },
                {
                    "name": "selectedColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "uiColor",
                    "defaultValue": "signal<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "uiComparedColor",
                    "defaultValue": "signal<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "handleColorChange",
                    "args": [
                        {
                            "name": "inputColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleInputEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetUiComparedColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateInputValue",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  effect,\r\n  EventEmitter,\r\n  input,\r\n  model,\r\n  output,\r\n  Output,\r\n  signal,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-color-picker',\r\n  templateUrl: './color-picker.component.html',\r\n  styleUrls: ['./color-picker.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class ColorPickerComponent {\r\n  inputId = input<string>('fg-color');\r\n  inputName = input<string>('foreground color');\r\n  color = input<string>('');\r\n  debug = input<boolean>(false);\r\n\r\n  comparedColor = model<string>('');\r\n\r\n  selectedColor = output<string>();\r\n\r\n  uiComparedColor = signal<string>('');\r\n\r\n  uiColor = signal<string>('');\r\n\r\n  handleColorChange(inputColor: string) {\r\n    // update ui main color\r\n    this.uiColor.set(inputColor);\r\n\r\n    // send out color for use in other comps\r\n    this.selectedColor.emit(inputColor);\r\n  }\r\n\r\n  handleInputEvent(event: Event) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n\r\n    const selectedColor = inputElement.value;\r\n\r\n    this.resetUiComparedColor();\r\n\r\n    this.handleColorChange(selectedColor);\r\n  }\r\n\r\n  resetUiComparedColor() {\r\n    this.uiComparedColor.set('transparent');\r\n  }\r\n\r\n  updateInputValue(color: string) {\r\n    const targetInput = document.getElementById(this.inputId()) as HTMLInputElement;\r\n\r\n    if (!targetInput) {\r\n      if (this.debug()) {\r\n        console.error(`no input found with id: ${this.inputId()}`);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    targetInput.value = color;\r\n  }\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const comparedColor = this.comparedColor();\r\n\r\n      this.uiComparedColor.set(comparedColor);\r\n    });\r\n\r\n    effect(() => {\r\n      const colorFromParent = this.color();\r\n\r\n      this.handleColorChange(colorFromParent);\r\n\r\n      this.updateInputValue(colorFromParent);\r\n\r\n      this.resetUiComparedColor();\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  display: inline-block;\r\n  position: relative;\r\n  border-radius: 5px 0 0 5px;\r\n\r\n  &:hover {\r\n    box-shadow: 0 4px 0 0 var(--ui-shadow-color);\r\n  }\r\n\r\n  input {\r\n    width: 50px;\r\n    height: 50px;\r\n    box-sizing: border-box;\r\n    border: var(--app-white) 2px solid;\r\n    border-radius: 5px 0 0 5px;\r\n  }\r\n\r\n  .color-preview {\r\n    border-radius: 5px 0 0 5px;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n\r\n    /* NOTE: 2(15px) + 15px = 45px */\r\n    width: 45px;\r\n    height: 45px;\r\n    border: transparent 15px solid;\r\n    transform: translate(-50%, -50%);\r\n    background-color: transparent;\r\n    pointer-events: none;\r\n    box-sizing: border-box;\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 66
            },
            "extends": [],
            "templateData": "<div class=\"comp-container\">\r\n  <label class=\"sr-only\" [for]=\"inputId()\">Color Picker One</label>\r\n  <input\r\n    type=\"color\"\r\n    [id]=\"inputId()\"\r\n    [name]=\"inputName()\"\r\n    (input)=\"handleInputEvent($event)\"\r\n  />\r\n\r\n  <div\r\n    class=\"color-preview\"\r\n    [style.borderColor]=\"uiComparedColor()\"\r\n    [style.backgroundColor]=\"uiColor()\"\r\n  ></div>\r\n</div>\r\n"
        },
        {
            "name": "ColorSliderComponent",
            "id": "component-ColorSliderComponent-d618fa4c1318279f8961e3123a73d8570342bd12ce31d9c72b0cf65df12dfb4fa36d858f1f29856b05deafac44cb673498ff0f88ffa0816eb87430a993c0e538",
            "file": "src/app/_components/color-slider/color-slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-slider",
            "styleUrls": [
                "./color-slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-slider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "required": false
                },
                {
                    "name": "constantChroma",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "required": false
                },
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "required": false
                },
                {
                    "name": "id",
                    "defaultValue": "'slider-0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | 'slider-0'",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "required": false
                },
                {
                    "name": "name",
                    "defaultValue": "'color-slider'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | 'color-slider'",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "required": false
                },
                {
                    "name": "resetSlider",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResetObject | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "required": false
                },
                {
                    "name": "showGradient",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "colorVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "devColorVariant",
                    "defaultValue": "signal<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "initValue",
                    "defaultValue": "signal<number>(NaN)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "slideContainer",
                    "defaultValue": "viewChild<ElementRef>('sliderContainer')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "slideInterval",
                    "defaultValue": "signal<number>(NaN)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "slideMax",
                    "defaultValue": "signal<number>(NaN)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "slideMin",
                    "defaultValue": "signal<number>(NaN)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "value",
                    "defaultValue": "signal<number>(NaN)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [
                {
                    "name": "getAndSetLightnessRange",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gradient",
                    "args": [
                        {
                            "name": "val",
                            "type": "\"on\" | \"off\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "\"on\" | \"off\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSliding",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redefineGradientStops",
                    "args": [
                        {
                            "name": "lightMin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lightMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lightMin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lightMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redefineVariable",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "variableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "variableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendInitialLightVariant",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  input,\r\n  Output,\r\n  EventEmitter,\r\n  inject,\r\n  effect,\r\n  output,\r\n  signal,\r\n  viewChild,\r\n  ElementRef,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ColorUtilService } from '../../services/color-util.service';\r\n\r\nexport interface ResetObject {\r\n  reset: true;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-color-slider',\r\n  templateUrl: './color-slider.component.html',\r\n  styleUrls: ['./color-slider.component.scss'],\r\n  imports: [CommonModule],\r\n  standalone: true,\r\n})\r\nexport class ColorSliderComponent {\r\n  cus = inject(ColorUtilService);\r\n\r\n  debug = input<boolean>(false);\r\n\r\n  slideContainer = viewChild<ElementRef>('sliderContainer');\r\n\r\n  id = input<string | 'slider-0'>('slider-0');\r\n  name = input<string | 'color-slider'>('color-slider');\r\n  color = input<string>('');\r\n  constantChroma = input<boolean>(false);\r\n  showGradient = input<boolean>(false);\r\n  resetSlider = input<ResetObject | null>(null);\r\n\r\n  colorVariant = output<string | null>();\r\n\r\n  devColorVariant = signal<string>('');\r\n  slideMin = signal<number>(NaN);\r\n  slideMax = signal<number>(NaN);\r\n  slideInterval = signal<number>(NaN);\r\n  value = signal<number>(NaN);\r\n  initValue = signal<number>(NaN);\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const boundColor = this.color();\r\n      const showGradient = this.showGradient();\r\n      const resetSlider = this.resetSlider();\r\n      const debug = this.debug();\r\n\r\n      if (!this.slideContainer()) {\r\n        if (debug) {\r\n          console.warn(`no slide container view child yet.`);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (!boundColor) {\r\n        if (debug) {\r\n          console.error(`no color specified`);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (boundColor) {\r\n        this.getAndSetLightnessRange(boundColor, {\r\n          constantChroma: this.constantChroma(),\r\n        });\r\n      }\r\n\r\n      if (showGradient) {\r\n        this.gradient('on');\r\n      }\r\n\r\n      if (!showGradient) {\r\n        this.gradient('off');\r\n      }\r\n\r\n      if (resetSlider && this.initValue()) {\r\n        this.reset();\r\n      }\r\n    });\r\n  }\r\n\r\n  sendInitialLightVariant() {\r\n    const color = this.color();\r\n\r\n    // Good UX to just send the input color?\r\n    this.colorVariant.emit(color);\r\n\r\n    if (this.debug()) {\r\n      this.devColorVariant.set(color);\r\n    }\r\n  }\r\n\r\n  async getAndSetLightnessRange(color: string, options?: { constantChroma: boolean }) {\r\n    const rangeObject = await this.cus.getMinMaxLight(color);\r\n\r\n    if (!rangeObject) {\r\n      console.error(`no range object for color ${color}`);\r\n\r\n      return;\r\n    }\r\n\r\n    this.sendInitialLightVariant();\r\n\r\n    this.slideMin.set(0);\r\n    this.slideMax.set(1);\r\n\r\n    if (options?.constantChroma) {\r\n      this.slideMin.set(rangeObject.lightMin);\r\n\r\n      this.slideMax.set(rangeObject.lightMax);\r\n    }\r\n\r\n    this.slideInterval.set((this.slideMax() - this.slideMin()) / 80);\r\n\r\n    const lightnessIndex = 0;\r\n    const initialSlideValue = rangeObject.originalCoords[lightnessIndex];\r\n\r\n    this.initValue.set(initialSlideValue);\r\n\r\n    this.value.set(initialSlideValue);\r\n\r\n    this.redefineGradientStops(this.slideMin(), this.slideMax());\r\n  }\r\n\r\n  handleSliding(event: Event) {\r\n    const inputElem = event.target as HTMLInputElement;\r\n\r\n    if (inputElem) {\r\n      const lightValue = parseFloat(inputElem.value);\r\n\r\n      const boundColor = this.color();\r\n\r\n      if (boundColor) {\r\n        const lightnessVariant = this.cus.createSrgbColor(boundColor, lightValue);\r\n\r\n        if (this.debug()) {\r\n          console.log(`slide modding ${this.color} to ${lightnessVariant}`);\r\n\r\n          this.devColorVariant.set(!lightnessVariant ? '' : lightnessVariant);\r\n        }\r\n\r\n        this.colorVariant.emit(lightnessVariant);\r\n      } else {\r\n        console.error(`no color specified`);\r\n      }\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    const compId = this.id();\r\n\r\n    // TODO: Isn't there an angular way to do this?\r\n    const element = document.getElementById(compId) as HTMLInputElement;\r\n\r\n    if (this.initValue) {\r\n      element.value = this.initValue.toString();\r\n    } else {\r\n      console.error(`trouble resetting slider, initValue is ${this.initValue}`);\r\n    }\r\n  }\r\n\r\n  gradient(val: 'on' | 'off') {\r\n    const targetElem = this.slideContainer()?.nativeElement as HTMLElement;\r\n\r\n    if (!targetElem) {\r\n      if (this.debug()) {\r\n        console.warn(`no elem to assign gradient to.`);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (val === 'on') {\r\n      targetElem.style.background = 'var(--gradient-background)';\r\n    }\r\n\r\n    if (val === 'off') {\r\n      targetElem.style.background = 'var(--default-background)';\r\n    }\r\n  }\r\n\r\n  redefineVariable(element: HTMLElement, variableName: string, newValue: string) {\r\n    element.style.setProperty(variableName, newValue);\r\n  }\r\n\r\n  redefineGradientStops(lightMin: number, lightMax: number) {\r\n    const compId = this.id();\r\n\r\n    if (this.color()) {\r\n      const targetElement = document.getElementById(`cc-${compId}`) as HTMLElement;\r\n\r\n      const stops = [\r\n        '--grad-stop-0',\r\n        '--grad-stop-1',\r\n        '--grad-stop-2',\r\n        '--grad-stop-3',\r\n        '--grad-stop-4',\r\n        '--grad-stop-5',\r\n      ];\r\n\r\n      // get new stop values\r\n      const stopInterval = (lightMax - lightMin) / (stops.length - 1);\r\n      const stopVals = [];\r\n\r\n      for (let i = 0; i < stops.length; i++) {\r\n        const targetLight = stopInterval * i + lightMin;\r\n        targetLight;\r\n\r\n        const boundColor = this.color();\r\n\r\n        if (!boundColor) {\r\n          console.error(`no color bound to redefine gradient stops with. . .`);\r\n\r\n          break;\r\n        } else {\r\n          const stopColor = this.cus.createSrgbColor(boundColor, targetLight);\r\n\r\n          stopVals.push(stopColor);\r\n        }\r\n      }\r\n\r\n      // assign new stop values\r\n\r\n      for (let i = 0; i < stops.length; i++) {\r\n        const targetStop = stops[i];\r\n        const targetStopVal = stopVals[i];\r\n\r\n        if (targetStopVal) {\r\n          this.redefineVariable(targetElement, targetStop, targetStopVal);\r\n        } else {\r\n          console.log(`no new val to assign`);\r\n        }\r\n      }\r\n    } else {\r\n      console.log(`no color specified`);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  --default-background: var(--app-white);\r\n  --grad-stop-0: black;\r\n  --grad-stop-1: rgb(8.6104% 8.6104% 8.6104%);\r\n  --grad-stop-2: rgb(28.06% 28.06% 28.06%);\r\n  --grad-stop-3: rgb(50.211% 50.211% 50.211%);\r\n  --grad-stop-4: rgb(74.321% 74.321% 74.321%);\r\n  --grad-stop-5: white;\r\n  --gradient-background: linear-gradient(\r\n    to right,\r\n    black,\r\n    var(--grad-stop-0) calc((var(--min-hit-dimension-aaa) / 2) + 8px),\r\n    var(--grad-stop-1),\r\n    var(--grad-stop-2),\r\n    var(--grad-stop-3),\r\n    var(--grad-stop-4),\r\n    var(--grad-stop-5) calc(100% - (var(--min-hit-dimension-aaa) / 2) - 8px),\r\n    white\r\n  );\r\n\r\n  box-sizing: border-box;\r\n  display: flex;\r\n\r\n  /* gives input more room on left and right ends to be hit more successfully */\r\n  padding: 0 calc(var(--min-hit-dimension-aaa) / 2);\r\n  border: 2px solid var(--app-white);\r\n  border-left: none;\r\n  border-right: none;\r\n  align-items: center;\r\n  background: var(--default-background);\r\n\r\n  &:hover {\r\n    box-shadow: 0 4px 0 0 var(--ui-shadow-color);\r\n  }\r\n\r\n  input {\r\n    flex-grow: 1;\r\n    width: 100%;\r\n    height: 46px;\r\n    min-height: var(--min-hit-dimension-aaa);\r\n    margin: 0;\r\n    background: var(--default-background);\r\n    background-color: red;\r\n  }\r\n\r\n  .special-case {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    height: 46px;\r\n    min-height: var(--min-hit-dimension-aaa);\r\n    align-items: center;\r\n\r\n    /* TODO: what do custom input text need to be? <p>? */\r\n    div {\r\n      font-family: var(--mono-font);\r\n      font-size: var(--min-body-text-size);\r\n      font-weight: 400;\r\n    }\r\n  }\r\n}\r\n\r\n.dev-overlay {\r\n  display: none;\r\n  position: absolute;\r\n  gap: 1rem;\r\n  right: 0;\r\n  bottom: 0;\r\n\r\n  &.active {\r\n    display: flex;\r\n  }\r\n\r\n  .light-variant-chip {\r\n    border-radius: 100%;\r\n    width: 15px;\r\n    height: 15px;\r\n    border: 15px solid var(--app-black);\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-slider.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 48
            },
            "extends": [],
            "templateData": "<div #sliderContainer [id]=\"'cc-' + id()\" class=\"comp-container\">\r\n  <label [for]=\"id()\" class=\"sr-only\">Chroma and hue bound Lightness</label>\r\n\r\n  @if (slideMin() !== slideMax()) {\r\n    <input\r\n      type=\"range\"\r\n      [name]=\"name()\"\r\n      [id]=\"id()\"\r\n      [min]=\"slideMin()\"\r\n      [max]=\"slideMax()\"\r\n      [step]=\"slideInterval()\"\r\n      [value]=\"value()\"\r\n      (input)=\"handleSliding($event)\"\r\n    />\r\n  } @else if (slideMin() === slideMax()) {\r\n    <div class=\"special-case\">\r\n      <div>!</div>\r\n    </div>\r\n  }\r\n</div>\r\n\r\n<div class=\"dev-overlay\" [ngClass]=\"{ active: debug() }\">\r\n  <h2>dev overlay</h2>\r\n\r\n  <div\r\n    class=\"light-variant-chip\"\r\n    [style.borderColor]=\"devColorVariant()\"\r\n    [style.backgroundColor]=\"color()\"\r\n  ></div>\r\n</div>\r\n"
        },
        {
            "name": "CopyToClipboardButtonComponent",
            "id": "component-CopyToClipboardButtonComponent-1b8f0a48b6b32734d574345a5e8cfdc6e76f876a93bb2eb5c77ff7c9f579bdf1318ff29ff69dc496a8da5532f3e5b14e79d35508ef1c23e9cfa6edea60f78b47",
            "file": "src/app/_components/copy-to-clipboard-button/copy-to-clipboard-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-copy-to-clipboard-button",
            "styleUrls": [
                "./copy-to-clipboard-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./copy-to-clipboard-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "required": false
                },
                {
                    "name": "debug",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "copyEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CopyToClipboardEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": false
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "copyToClipboard",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter, input, output } from '@angular/core';\r\n\r\nexport class CopyToClipboardEvent {\r\n  copied: boolean = false;\r\n  color: string = '';\r\n}\r\n\r\n@Component({\r\n  selector: 'app-copy-to-clipboard-button',\r\n  templateUrl: './copy-to-clipboard-button.component.html',\r\n  styleUrls: ['./copy-to-clipboard-button.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class CopyToClipboardButtonComponent {\r\n  color = input<string>('');\r\n  debug = input<boolean>(true);\r\n\r\n  copyEvent = output<CopyToClipboardEvent>();\r\n\r\n  async copyToClipboard(): Promise<void> {\r\n    const color = this.color();\r\n\r\n    if (!color) {\r\n      if (this.debug()) {\r\n        console.warn('no color provided to copy');\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const colorSansHex = color.replace('#', '');\r\n\r\n    try {\r\n      await navigator.clipboard.writeText(colorSansHex);\r\n\r\n      this.copyEvent.emit({\r\n        copied: true,\r\n        color: colorSansHex,\r\n      });\r\n\r\n      if (this.debug()) {\r\n        console.log(color, 'copied to clipboard');\r\n      }\r\n    } catch (err) {\r\n      this.copyEvent.emit({\r\n        copied: false,\r\n        color: colorSansHex,\r\n      });\r\n\r\n      console.error('Failed to copy text: ', err);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  display: inline-block;\r\n  position: relative;\r\n\r\n  button {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 0 5px 5px 0;\r\n    width: 50px;\r\n    height: 50px;\r\n    padding: 0.25rem;\r\n    border: transparent 2px solid;\r\n    background-color: var(--app-white);\r\n    min-width: var(--min-hit-dimension-aaa);\r\n    min-height: var(--min-hit-dimension-aaa);\r\n\r\n    &:hover {\r\n      box-shadow: 0 4px 0 0 var(--ui-shadow-color);\r\n    }\r\n\r\n    .svg-container {\r\n      width: 22px;\r\n      height: auto;\r\n\r\n      svg {\r\n        fill: var(--app-black);\r\n        display: block;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./copy-to-clipboard-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"comp-container\">\r\n  <button\r\n    id=\"'ctc-0'\"\r\n    [disabled]=\"!color()\"\r\n    [attr.aria-disabled]=\"!color()\"\r\n    (click)=\"copyToClipboard()\"\r\n  >\r\n    <span class=\"sr-only\"> Copy current variant to Clipboard </span>\r\n\r\n    <div class=\"svg-container\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" x=\"0px\" y=\"0px\">\r\n        <path\r\n          fill-rule=\"evenodd\"\r\n          d=\"M384,608 L384,624 L368,624 L368,608 L384,608 Z M370,622 L382,622 L382,610 L370,610 L370,622 Z M362,602 L362,614 L366,614 L366,616 L360,616 L360,600 L376,600 L376,606 L374,606 L374,602 L362,602 Z\"\r\n          transform=\"translate(-360 -600)\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-35575735b3444c6f049822f5234963ce3b046795ea9cdf6a15e8c7d72acd8ededb78ca25c4e1fbb5f0416c5855203a87ae0483f5d065c2dfa68d5329e347a84b",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ButtonComponent } from './button.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent],\r\n  template: `<header>\r\n  <div class=\"storybook-header\">\r\n    <div>\r\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <g fill=\"none\" fillRule=\"evenodd\">\r\n          <path\r\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n            fill=\"#FFF\"\r\n          />\r\n          <path\r\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n            fill=\"#555AB9\"\r\n          />\r\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\r\n        </g>\r\n      </svg>\r\n      <h1>Acme</h1>\r\n    </div>\r\n    <div>\r\n      <div *ngIf=\"user\">\r\n        <span class=\"welcome\">\r\n          Welcome, <b>{{ user.name }}</b\r\n          >!\r\n        </span>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n      </div>\r\n      <div *ngIf=\"!user\">\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          class=\"margin-left\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          [primary]=\"true\"\r\n          class=\"margin-left\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.storybook-header svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header h1 {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin: 6px 0 6px 10px;\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n}\r\n\r\n.storybook-header button + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.storybook-header .welcome {\r\n  margin-right: 10px;\r\n  color: #333;\r\n  font-size: 14px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MetadataComponent",
            "id": "component-MetadataComponent-3889e5a50165df2e8062d1e3b7b565480e69be76f15ffde16aed2030f3092c772ed38fddb0dd43230633b15661d4bae4644711d29877262bc9969e4cc1f5b579",
            "file": "src/app/_components/metadata/metadata.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-metadata",
            "styleUrls": [
                "./metadata.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./metadata.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colorOne",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "required": false
                },
                {
                    "name": "colorTwo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "required": false
                },
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cms",
                    "defaultValue": "inject(ColorMetricsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "colorOneMeta",
                    "defaultValue": "computed<ColorMetaObj | null>(() => {\r\n    const colOne = this.colorOne();\r\n    if (!colOne) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get colorOne meta');\r\n      }\r\n      return null;\r\n    }\r\n    return this.cus.getColorMeta(colOne) ?? null;\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "colorTwoMeta",
                    "defaultValue": "computed<ColorMetaObj | null>(() => {\r\n    const colTwo = this.colorTwo();\r\n    if (!colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get colorTwo meta');\r\n      }\r\n      return null;\r\n    }\r\n    return this.cus.getColorMeta(colTwo) ?? null;\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "differences",
                    "defaultValue": "computed<DifferencesDataObj>(() => {\r\n    const colOne = this.colorOne();\r\n    const colTwo = this.colorTwo();\r\n    const result = new DifferencesDataObj();\r\n    if (!colOne || !colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get color differences');\r\n      }\r\n      return result;\r\n    }\r\n    const deltaE = this.cus.calcDeltaE(colOne, colTwo);\r\n    const wcag2New = this.cms.getContrast(colOne, colTwo, 'bpca');\r\n    const wcag2Old = this.cus.calcWcag2(colOne, colTwo);\r\n    const apca = this.cms.getContrast(colOne, colTwo, 'apca');\r\n    result.deltaE = !deltaE ? NaN : deltaE;\r\n    result.wcag2New = !wcag2New ? NaN : wcag2New;\r\n    result.wcag2Old = !wcag2Old ? NaN : wcag2Old;\r\n    result.apca = !apca ? NaN : apca;\r\n    return result;\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "successes",
                    "defaultValue": "computed<SuccessesObj>(() => {\r\n    const colOne = this.colorOne();\r\n    const colTwo = this.colorTwo();\r\n    const result: SuccessesObj = {\r\n      text: null,\r\n      largeText: null,\r\n      objectMinDimension: NaN,\r\n    };\r\n    if (!colOne || !colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('no colors for successes');\r\n      }\r\n      return result;\r\n    }\r\n    const wcagNew = this.cms.getContrast(colOne, colTwo, 'bpca');\r\n    const apcaScore = this.cms.getContrast(colOne, colTwo, 'apca');\r\n    if (!wcagNew || !apcaScore) {\r\n      if (this.debug()) {\r\n        console.warn('trouble getting scores');\r\n      }\r\n      return result;\r\n    }\r\n    if (wcagNew < 0 || Math.abs(apcaScore) < 0) {\r\n      if (this.debug()) {\r\n        console.warn('something wonky with calculating scores');\r\n      }\r\n      return result;\r\n    }\r\n    result.text = wcagNew >= 4.5 ? 'pass' : 'fail';\r\n    result.largeText = wcagNew >= 3 ? 'pass' : 'fail';\r\n    const minDimension = this.cus.getMinObjectDimension(apcaScore);\r\n    result.objectMinDimension = Number.isNaN(minDimension) ? 'invisible' : minDimension;\r\n    return result;\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, effect, inject, input, signal, computed } from '@angular/core';\r\nimport { ColorUtilService, ColorMetaObj } from '../../services/color-util.service';\r\nimport { ColorMetricsService } from '../../services/color-metrics.service';\r\n\r\nexport class DifferencesDataObj {\r\n  deltaE: number = NaN;\r\n  wcag2Old: number = NaN;\r\n  wcag2New: number = NaN;\r\n  apca: number = NaN;\r\n}\r\nexport class SuccessesObj {\r\n  text: 'pass' | 'fail' | null = null;\r\n  largeText: 'pass' | 'fail' | null = null;\r\n  objectMinDimension: number | string = NaN;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class MetadataComponent {\r\n  colorOne = input<string>('');\r\n  colorTwo = input<string>('');\r\n  debug = input<boolean>(false);\r\n\r\n  private readonly cus = inject(ColorUtilService);\r\n  private readonly cms = inject(ColorMetricsService);\r\n\r\n  readonly colorOneMeta = computed<ColorMetaObj | null>(() => {\r\n    const colOne = this.colorOne();\r\n    if (!colOne) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get colorOne meta');\r\n      }\r\n      return null;\r\n    }\r\n    return this.cus.getColorMeta(colOne) ?? null;\r\n  });\r\n\r\n  readonly colorTwoMeta = computed<ColorMetaObj | null>(() => {\r\n    const colTwo = this.colorTwo();\r\n    if (!colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get colorTwo meta');\r\n      }\r\n      return null;\r\n    }\r\n    return this.cus.getColorMeta(colTwo) ?? null;\r\n  });\r\n\r\n  readonly differences = computed<DifferencesDataObj>(() => {\r\n    const colOne = this.colorOne();\r\n    const colTwo = this.colorTwo();\r\n    const result = new DifferencesDataObj();\r\n    if (!colOne || !colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('failed to get color differences');\r\n      }\r\n      return result;\r\n    }\r\n    const deltaE = this.cus.calcDeltaE(colOne, colTwo);\r\n    const wcag2New = this.cms.getContrast(colOne, colTwo, 'bpca');\r\n    const wcag2Old = this.cus.calcWcag2(colOne, colTwo);\r\n    const apca = this.cms.getContrast(colOne, colTwo, 'apca');\r\n    result.deltaE = !deltaE ? NaN : deltaE;\r\n    result.wcag2New = !wcag2New ? NaN : wcag2New;\r\n    result.wcag2Old = !wcag2Old ? NaN : wcag2Old;\r\n    result.apca = !apca ? NaN : apca;\r\n    return result;\r\n  });\r\n\r\n  readonly successes = computed<SuccessesObj>(() => {\r\n    const colOne = this.colorOne();\r\n    const colTwo = this.colorTwo();\r\n    const result: SuccessesObj = {\r\n      text: null,\r\n      largeText: null,\r\n      objectMinDimension: NaN,\r\n    };\r\n    if (!colOne || !colTwo) {\r\n      if (this.debug()) {\r\n        console.warn('no colors for successes');\r\n      }\r\n      return result;\r\n    }\r\n    const wcagNew = this.cms.getContrast(colOne, colTwo, 'bpca');\r\n    const apcaScore = this.cms.getContrast(colOne, colTwo, 'apca');\r\n    if (!wcagNew || !apcaScore) {\r\n      if (this.debug()) {\r\n        console.warn('trouble getting scores');\r\n      }\r\n      return result;\r\n    }\r\n    if (wcagNew < 0 || Math.abs(apcaScore) < 0) {\r\n      if (this.debug()) {\r\n        console.warn('something wonky with calculating scores');\r\n      }\r\n      return result;\r\n    }\r\n    result.text = wcagNew >= 4.5 ? 'pass' : 'fail';\r\n    result.largeText = wcagNew >= 3 ? 'pass' : 'fail';\r\n    const minDimension = this.cus.getMinObjectDimension(apcaScore);\r\n    result.objectMinDimension = Number.isNaN(minDimension) ? 'invisible' : minDimension;\r\n    return result;\r\n  });\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  display: flex;\r\n  position: relative;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n  gap: 0.5rem 4rem;\r\n  justify-content: center;\r\n\r\n  div {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    max-width: 30ch;\r\n  }\r\n\r\n  h3 {\r\n    text-align: center;\r\n  }\r\n\r\n  table {\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  tr {\r\n    :nth-child(2) {\r\n      font-family: var(--mono-font);\r\n      text-align: right;\r\n      font-style: normal;\r\n      padding-left: 1ch;\r\n      min-width: 9ch;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./metadata.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"comp-container\">\r\n  <div>\r\n    <h3>Successes and Minimums</h3>\r\n    <table>\r\n      <caption class=\"sr-only\">\r\n        Various pass, fails or minimum dimensions related to visual elements.\r\n      </caption>\r\n      <thead class=\"sr-only\">\r\n        <tr>\r\n          <th>Criteria</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Text</td>\r\n          <td>{{ successes().text }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Large Text</td>\r\n          <td>{{ successes().largeText }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <cite><a href=\"#notes-object\">Object</a></cite>\r\n          </td>\r\n          <td>{{ successes().objectMinDimension }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <div>\r\n    <h3>Differences</h3>\r\n    <table>\r\n      <caption class=\"sr-only\">\r\n        Differences between Foreground Color and Background Color.\r\n      </caption>\r\n      <thead class=\"sr-only\">\r\n        <tr>\r\n          <th>Measurement</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Delta E</td>\r\n          <td>{{ differences().deltaE }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <cite><a href=\"#notes-perceptual-contrast\"> Perceptual contrast</a></cite>\r\n          </td>\r\n          <td>{{ differences().apca }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <cite><a href=\"#notes-wcag2-compat\"> WCAG 2 compatible</a></cite>\r\n          </td>\r\n          <td>{{ differences().wcag2New }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <cite><a href=\"#notes-wcag2\">WCAG 2</a></cite>\r\n          </td>\r\n          <td>{{ differences().wcag2Old }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <div>\r\n    <h3>Foreground Color</h3>\r\n    <table>\r\n      <caption class=\"sr-only\">\r\n        Foreground Color Metadata\r\n      </caption>\r\n      <thead class=\"sr-only\">\r\n        <tr>\r\n          <th>Measurement</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Saturation</td>\r\n          <td>{{ colorOneMeta()?.saturation }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Lightness</td>\r\n          <td>{{ colorOneMeta()?.lightness }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Chroma</td>\r\n          <td>{{ colorOneMeta()?.chroma }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Hue</td>\r\n          <td>{{ colorOneMeta()?.hue }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <div>\r\n    <h3>Background Color</h3>\r\n    <table>\r\n      <caption class=\"sr-only\">\r\n        Background Color Metadata\r\n      </caption>\r\n      <thead class=\"sr-only\">\r\n        <tr>\r\n          <th>Measurement</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Saturation</td>\r\n          <td>{{ colorTwoMeta()?.saturation }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Lightness</td>\r\n          <td>{{ colorTwoMeta()?.lightness }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Chroma</td>\r\n          <td>{{ colorTwoMeta()?.chroma }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Hue</td>\r\n          <td>{{ colorTwoMeta()?.hue }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-79bfb042a722f49579739dfd01d8f1b67681d0272a72a283c14edeb22f0462775c80ba4f7c1eb0fa4bd5fa1844083da0140980e75b5500cd98cc26421ec6d569",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HeaderComponent } from './header.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HeaderComponent],\r\n  template: `<article>\r\n  <storybook-header\r\n    [user]=\"user\"\r\n    (onLogout)=\"doLogout()\"\r\n    (onLogin)=\"doLogin()\"\r\n    (onCreateAccount)=\"doCreateAccount()\"\r\n  ></storybook-header>\r\n  <section class=\"storybook-page\">\r\n    <h2>Pages in Storybook</h2>\r\n    <p>\r\n      We recommend building UIs with a\r\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        <strong>component-driven</strong>\r\n      </a>\r\n      process starting with atomic components and ending with pages.\r\n    </p>\r\n    <p>\r\n      Render pages with mock data. This makes it easy to build and review page states without\r\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n      in Storybook:\r\n    </p>\r\n    <ul>\r\n      <li>\r\n        Use a higher-level connected component. Storybook helps you compose such data from the\r\n        \"args\" of child component stories\r\n      </li>\r\n      <li>\r\n        Assemble data in the page component from your services. You can mock these services out\r\n        using Storybook.\r\n      </li>\r\n    </ul>\r\n    <p>\r\n      Get a guided tutorial on component-driven development at\r\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        Storybook tutorials\r\n      </a>\r\n      . Read more in the\r\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n      .\r\n    </p>\r\n    <div class=\"tip-wrapper\">\r\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <g fill=\"none\" fillRule=\"evenodd\">\r\n          <path\r\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n            id=\"a\"\r\n            fill=\"#999\"\r\n          />\r\n        </g>\r\n      </svg>\r\n      Viewports addon in the toolbar\r\n    </div>\r\n  </section>\r\n</article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  margin: 0 auto;\r\n  padding: 48px 20px;\r\n  max-width: 600px;\r\n  color: #333;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.storybook-page h2 {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin: 0 0 4px;\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  color: inherit;\r\n}\r\n\r\n.storybook-page ul {\r\n  margin: 1em 0;\r\n  padding-left: 30px;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin-right: 10px;\r\n  border-radius: 1em;\r\n  background: #e7fdd8;\r\n  padding: 4px 12px;\r\n  color: #357a14;\r\n  font-weight: 700;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n  margin-right: 4px;\r\n  width: 12px;\r\n  height: 12px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PaletteTableComponent",
            "id": "component-PaletteTableComponent-7328d72a5e3a1f614fb03d666b5296e76edf92b4173eae715740d9e877d196ca2440c5967afb9dcc821e9a45eb09ba786e435b9c53ae25681d9ad74a0dbc041c",
            "file": "src/app/_components/palette-table/palette-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-palette-table",
            "styleUrls": [
                "./palette-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./palette-table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "required": false
                },
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedColor",
                    "defaultValue": "new EventEmitter<TableColorCell>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chromaSteps",
                    "defaultValue": "14",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "dataStruct",
                    "defaultValue": "signal<TableData>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "lightSteps",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "tableHeaders",
                    "defaultValue": "computed<number[]>(() => {\r\n    const data = this.dataStruct();\r\n    if (!data.length || !data[0].length) return [];\r\n    return data[0].map((cell) => cell.chroma);\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getTableData",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTextColor",
                    "args": [
                        {
                            "name": "bkgdColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"white\" | \"black\"",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bkgdColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectColor",
                    "args": [
                        {
                            "name": "rowNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columnNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columnNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  inject,\r\n  input,\r\n  signal,\r\n  computed,\r\n  effect,\r\n} from '@angular/core';\r\nimport { ColorUtilService } from '../../services/color-util.service';\r\n\r\nexport class TableColorCell {\r\n  color: string = '';\r\n  lightness: number = NaN;\r\n  chroma: number = NaN;\r\n  hue: number = NaN;\r\n  deltaE: number = NaN;\r\n  deltaLightness: number = NaN;\r\n  deltaChroma: number = NaN;\r\n}\r\n\r\nexport type TableRow = Array<TableColorCell>;\r\n\r\nexport type TableData = Array<TableRow>;\r\n\r\n@Component({\r\n  selector: 'app-palette-table',\r\n  templateUrl: './palette-table.component.html',\r\n  styleUrls: ['./palette-table.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class PaletteTableComponent {\r\n  color = input<string>('');\r\n  debug = input<boolean>(false);\r\n\r\n  @Output() selectedColor = new EventEmitter<TableColorCell>();\r\n\r\n  readonly cus = inject(ColorUtilService);\r\n\r\n  readonly lightSteps = 5;\r\n  readonly chromaSteps = 14;\r\n\r\n  // Signals for table data and headers\r\n  readonly dataStruct = signal<TableData>([]);\r\n  readonly tableHeaders = computed<number[]>(() => {\r\n    const data = this.dataStruct();\r\n    if (!data.length || !data[0].length) return [];\r\n    return data[0].map((cell) => cell.chroma);\r\n  });\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const color = this.color();\r\n      this.getTableData(color);\r\n    });\r\n  }\r\n\r\n  selectColor(rowNum: number, columnNum: number) {\r\n    const data = this.dataStruct();\r\n    const targetColor = data[rowNum][columnNum];\r\n    this.selectedColor.emit(targetColor);\r\n  }\r\n\r\n  getTextColor(bkgdColor: string) {\r\n    return (this.cus.calcWcag2('white', bkgdColor) as number) >= 7 ? 'white' : 'black';\r\n  }\r\n\r\n  async getTableData(color: string) {\r\n    if (!color) {\r\n      if (this.debug()) {\r\n        console.warn(`no color for palette table`);\r\n      }\r\n      this.dataStruct.set([]);\r\n      return;\r\n    }\r\n    const data = await this.cus.generateAllOklchVariants(color, this.lightSteps, this.chromaSteps);\r\n    this.dataStruct.set(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  border-radius: 2px;\r\n\r\n  table {\r\n    border-collapse: collapse;\r\n\r\n    th {\r\n      font-family: var(--mono-font);\r\n    }\r\n\r\n    td {\r\n      margin: 0;\r\n      padding: 7.5px;\r\n      line-height: 0;\r\n    }\r\n\r\n    tbody {\r\n      th {\r\n        text-align: right;\r\n      }\r\n    }\r\n\r\n    button {\r\n      margin: 0;\r\n      padding: 0;\r\n      border: transparent 2px solid;\r\n      box-sizing: border-box;\r\n      border-radius: 5px;\r\n      min-width: 22px;\r\n      min-height: 22px;\r\n      line-height: 0;\r\n      font-size: 0;\r\n\r\n      span {\r\n        line-height: 0;\r\n      }\r\n\r\n      &:hover:not([disabled]) {\r\n        background-color: white !important;\r\n        border-color: #8f8f8f !important;\r\n      }\r\n    }\r\n\r\n    .no-color {\r\n      margin: 0;\r\n      padding: 0;\r\n      border: transparent 2px solid;\r\n      box-sizing: border-box;\r\n      border-radius: 5px;\r\n      min-width: 22px;\r\n      min-height: 22px;\r\n      line-height: 0;\r\n      font-size: 0;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./palette-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 50
            },
            "extends": [],
            "templateData": "<div class=\"comp-container\">\r\n  @if (dataStruct().length) {\r\n  <table [style.backgroundColor]=\"color()\">\r\n    <caption class=\"sr-only\">\r\n      Collection of colors sharing the same hue organized by chroma as columns, and lightness as\r\n      rows. Selecting a button in the table will copy the its color to the clipboard.\r\n    </caption>\r\n    <thead>\r\n      <tr class=\"sr-only\">\r\n        <td>&nbsp;</td>\r\n        @for (header of tableHeaders(); track $index) {\r\n        <th>{{ header.toFixed(5) }}</th>\r\n        }\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      @for (row of dataStruct(); track i; let i = $index) {\r\n      <tr>\r\n        <th class=\"sr-only\">{{ row[0]['lightness'].toFixed(5) }}</th>\r\n        @for (cell of row; track j; let j = $index) {\r\n        <td>\r\n          <div>\r\n            @if (cell.color) {\r\n            <button\r\n              [style.backgroundColor]=\"cell.deltaE === 0 ? 'black' : cell.color\"\r\n              [style.color]=\"getTextColor(cell.color)\"\r\n              [style.borderColor]=\"cell.deltaE === 0 ? 'white' : cell.color\"\r\n              (click)=\"selectColor(i, j)\"\r\n            >\r\n              <span class=\"sr-only\">{{ cell.color }}, </span>\r\n              <span class=\"sr-only\">{{ cell.deltaLightness }}%, </span>\r\n              <span class=\"sr-only\">{{ cell.deltaChroma }}%, </span>\r\n              <span class=\"sr-only\">{{ cell.deltaE }}</span>\r\n            </button>\r\n            } @else {\r\n            <div class=\"no-color\">\r\n              <p class=\"sr-only\">color out of sRGB gamut</p>\r\n            </div>\r\n            }\r\n          </div>\r\n        </td>\r\n        }\r\n      </tr>\r\n      }\r\n    </tbody>\r\n  </table>\r\n  }\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideZonelessChangeDetection(),\r\n    provideRouter(routes)\r\n  ]\r\n}"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Routes",
                "defaultValue": "[]"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ColorCoordArray",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[number, number, number]",
                "file": "src/app/services/color-util.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "ColorPair",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[string, string]",
                "file": "src/app/services/color-util.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "ContrastType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"apca\" | \"bpca\"",
                "file": "src/app/services/color-metrics.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "TableData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Array<TableRow>",
                "file": "src/app/_components/palette-table/palette-table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "TableRow",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Array<TableColorCell>",
                "file": "src/app/_components/palette-table/palette-table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideZonelessChangeDetection(),\r\n    provideRouter(routes)\r\n  ]\r\n}"
                }
            ],
            "src/app/app.routes.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Routes",
                    "defaultValue": "[]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/services/color-util.service.ts": [
                {
                    "name": "ColorCoordArray",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[number, number, number]",
                    "file": "src/app/services/color-util.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "ColorPair",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[string, string]",
                    "file": "src/app/services/color-util.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "src/app/services/color-metrics.service.ts": [
                {
                    "name": "ContrastType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"apca\" | \"bpca\"",
                    "file": "src/app/services/color-metrics.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "src/app/_components/palette-table/palette-table.component.ts": [
                {
                    "name": "TableData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Array<TableRow>",
                    "file": "src/app/_components/palette-table/palette-table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "TableRow",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Array<TableColorCell>",
                    "file": "src/app/_components/palette-table/palette-table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "children": []
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/_components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/alert/alert.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AlertMessagObj",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/color-contrast/color-contrast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorContrastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/color-contrast/color-contrast.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ContrastObject",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/color-picker/color-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/color-slider/color-slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorSliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/color-slider/color-slider.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResetObject",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/copy-to-clipboard-button/copy-to-clipboard-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CopyToClipboardButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/copy-to-clipboard-button/copy-to-clipboard-button.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CopyToClipboardEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/metadata/metadata.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetadataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/metadata/metadata.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DifferencesDataObj",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/metadata/metadata.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SuccessesObj",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/palette-table/palette-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaletteTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/palette-table/palette-table.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableColorCell",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/palette-table/palette-table.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TableData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/palette-table/palette-table.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TableRow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.ts",
                "type": "component",
                "linktype": "component",
                "name": "App",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/bpca.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BpcaService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-metrics.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorMetricsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-metrics.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NumberKeyLookup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-metrics.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ContrastType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChromaMatchObject",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorUtilService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColorMetaObj",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MinMaxLightObject",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ColorCoordArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ColorPair",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}